syntax = "proto3";
option java_package = "org.metamesh.chub.proto";
option java_outer_classname = "Message";

enum SignatureType {
  SHA512withECDSA = 0;
}
enum AsymmetricKeyType {
  secp384r1 = 0;
	secp521r1 = 1;
}
enum SymmetricKeyType {
  AES_256_GCM_PBKDF2WithHmacSHA256_65536_128 = 0;
}

enum KeyEncodingType {
  pkcs8 = 0;
  x509 = 1;
}

enum ImageType {
	jpeg = 0;
}

message Image {
	bytes image = 1;
	ImageType imageType = 2;
}

message Post {
   bytes id = 1;
   string title = 2;
  string description = 3;
  string location = 4;
  fixed64 start_time = 5;
  bool all_day = 6;
  fixed64 end_time = 7;
  Image image = 8;
  fixed64 rsvp_by = 9;
  string rsvp_email = 10;
}

message Signature {
  //string cn = 1;
   bytes signature = 2;
   SignatureType signature_type = 3;
   //bytes fingerprint = 4;
   bytes id = 5;
   KeyId key_id = 6;
}

message DistinguishedName {
	string country = 1;
  string organization = 2;
  string organizational_unit = 3;
  string distinguished_name_qualifier = 4;
  string state = 5;
  string common_name = 6;
  string serial_number = 7;
	string email = 8;
}

message KeyId {
	 bytes fingerprint_sha512 = 1;
	 DistinguishedName dn = 2;
   AsymmetricKeyType type = 3;
}

message PrivateKey {
  //string cn = 1;
   SymmetriclyEncryptedMessage key = 2;
  //AsymmetricKeyType type = 3;
  //SymmetricKeyType encryption_type = 4;
   KeyEncodingType encodingType = 5;
	 KeyId key_id = 6;
	 bytes id = 7;
}

message PublicKey {
  //string cn = 1;
   bytes key = 2;
  //AsymmetricKeyType type = 3;
   KeyEncodingType encodingType = 4;
	 KeyId key_id = 5;
	 bytes id = 6;
}

enum MessageType {
  MessagePost = 0;
  MessageSignature = 1;
  MessagePrivateKey = 2;
  MessagePublicKey = 3;
  MessageSymmetriclyEncryptedMessage = 4;
  MessageAsymmetriclyEncryptedMessage = 5;
  MessageHybridEncryptedMessage = 6;
  MessageReferenceMessage = 7;

  MessageSymetricKey = 100;
}

message SymmetriclyEncryptedMessage {
  MessageType message_type = 1;
   SymmetricKeyType encryption_type = 2;
   bytes msg = 3;
   bytes iv = 4;
   bytes salt = 5;
   bytes id = 6;
}

message AsymmetriclyEncryptedMessage {
  MessageType message_type = 1;
   KeyId dest_key = 2;
   bytes msg = 4;
   bytes id = 5;
}

//message HybridEncryptedMessage {
//  AsymmetriclyEncryptedMessage key = 1;
//  SymmetriclyEncryptedMessage msg = 2;
//  MessageReference ref = 3;
//}

message MessageReference {
   bytes id = 1;
}

message SignedMessage {
  oneof msg {
    Post post = 1;
    Signature signedMessage = 2;
    PrivateKey privateKey = 3;
    PublicKey publicKey =4;
    SymmetriclyEncryptedMessage symmetriclyEncryptedMessage = 5;
    AsymmetriclyEncryptedMessage asymmetriclyEncryptedMessage  = 6;
//    HybridEncryptedMessage hybridEncryptedMessage = 7;
    MessageReference reference = 10;
  };
  Signature message_signature = 8;
  fixed64 timestamp = 9;
  bytes id = 11;
}
