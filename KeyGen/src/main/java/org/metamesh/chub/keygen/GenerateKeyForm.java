/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.metamesh.chub.keygen;

import com.github.sardine.Sardine;
import com.github.sardine.SardineFactory;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.KeyPair;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.metamesh.chub.crypto.ECC_Crypto;
import org.metamesh.chub.crypto.keys.ChubPrivKey;
import org.metamesh.chub.crypto.keys.ChubPubKey;
import org.metamesh.chub.crypto.serialize.PBSerialize;
import org.metamesh.chub.proto.Message;
import org.metamesh.chub.util.Alert;
import org.metamesh.chub.util.Settings;

public class GenerateKeyForm extends javax.swing.JPanel {

    private KeyPair kp;
    private ChubPrivKey priv;
    private ChubPubKey pub;

    /**
     * Creates new form NewJPanel
     */
    public GenerateKeyForm() {
        initComponents();
        jLabel1.setVisible(false);
    }

    private final List<Consumer<KeyGenEvent>> keyGenListeners = new ArrayList<>();

    public void addGeneratedListener(Consumer<KeyGenEvent> c) {
        System.out.println("addGeneratedListener" + c);
        keyGenListeners.add(c);
    }

    private void triggerGenerated() {
        KeyGenEvent e = new KeyGenEvent();
        System.out.println("triggerGenerated");
        System.out.println("triggerGenerated " + keyGenListeners.size());
        keyGenListeners.stream()
                .forEach((c) -> {
                    System.out.println(c);
                    c.accept(e);
                });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Password = new javax.swing.JPasswordField();
        SaveButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jLabel4.setText("E-Mail Address");

        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        jLabel3.setText("Password (minimum 4 characters):");

        SaveButton.setText("Create User");
        SaveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                SaveButtonMousePressed(evt);
            }
        });
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/spinner_25_anti_alias.gif"))); // NOI18N
        jLabel1.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SaveButton)
                        .addGap(107, 107, 107)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(email, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                            .addComponent(Password))))
                .addContainerGap(144, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap(121, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void generateKey() {
        kp = ECC_Crypto.genECKey();
        Message.DistinguishedName dn = Message.DistinguishedName.newBuilder()
                .setEmail(email.getText())
                .build();

        priv = new ChubPrivKey(dn, kp);
        pub = new ChubPubKey(dn, kp);
    }
    private boolean key_gening = false;

    private void SaveButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveButtonMousePressed
        try {
            jLabel1.setVisible(true);
            if (key_gening) {
                return;
            }
            key_gening = true;
            generateKey();

            if (Password.getPassword().length < 4) {
                Alert.warning("Password must be greater than 4 characters");
                return;
            }

            for (String f : Settings.base_dir_file.list()) {
                if (f.contains(email.getText() + "-")) {
                    Alert.warning("There is already a key for " + email.getText());
                    return;
                }
            }

            Message.PrivateKey priv_key_enc = PBSerialize.serialize(priv, Message.SymmetricKeyType.AES_128_GCM_PBKDF2WithHmacSHA256_65536_128, Password.getPassword());
            Message.PublicKey pub_key_enc = PBSerialize.serialize(pub);

            String base_filename = email.getText()
                    + "-"
                    + priv.fingerprintAsString();
            String pathPrefix = Settings.base_dir
                    + File.separator;

            String privFilePathbase = base_filename + ".priv.pb";
            String pubFilePathbase = base_filename + ".pub.pb";

            String privFilePath = pathPrefix + privFilePathbase;
            String pubFilePath = pathPrefix + pubFilePathbase;

            String host = Settings.props.getProperty("host");
            String path_prefix = Settings.props.getProperty("path_prefix");

            String davPrefix = "http://" + host + "/" + path_prefix + "/keys/";

            Sardine sardine = SardineFactory.begin();
            sardine.setCredentials("test", "test");

            try (FileOutputStream out = new FileOutputStream(privFilePath)) {
                //sardine.createDirectory(davPrefix);
                byte[] bytes = priv_key_enc.toByteArray();
                sardine.put(davPrefix + privFilePathbase, bytes);
                out.write(bytes);
                try (FileOutputStream pubout = new FileOutputStream(pubFilePath)) {
                    bytes = pub_key_enc.toByteArray();
                    pubout.write(bytes);
                    sardine.put(davPrefix + pubFilePathbase, bytes);
                    Logger.getLogger(GenerateKeyForm.class.getName()).log(Level.INFO, "Wrote key to " + privFilePath + " and " + pubFilePath);
                    triggerGenerated();
                }
            } catch (IOException ex) {
                Logger.getLogger(GenerateKeyForm.class.getName()).log(Level.SEVERE, null, ex);
                Alert.warning(ex.getMessage());
            }
        } finally {
            key_gening = false;
            jLabel1.setVisible(false);
        }
    }//GEN-LAST:event_SaveButtonMousePressed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField Password;
    private javax.swing.JButton SaveButton;
    private javax.swing.JTextField email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
