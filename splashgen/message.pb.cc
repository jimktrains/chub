// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ImageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Image> {
} _Image_default_instance_;
class PostDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Post> {
} _Post_default_instance_;
class SignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Signature> {
} _Signature_default_instance_;
class DistinguishedNameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DistinguishedName> {
} _DistinguishedName_default_instance_;
class KeyIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyId> {
} _KeyId_default_instance_;
class PrivateKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PrivateKey> {
} _PrivateKey_default_instance_;
class PublicKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PublicKey> {
} _PublicKey_default_instance_;
class SymmetriclyEncryptedMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SymmetriclyEncryptedMessage> {
} _SymmetriclyEncryptedMessage_default_instance_;
class AsymmetriclyEncryptedMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AsymmetriclyEncryptedMessage> {
} _AsymmetriclyEncryptedMessage_default_instance_;
class MessageReferenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MessageReference> {
} _MessageReference_default_instance_;
class SignedMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SignedMessage> {
  public:
  const ::Post* post_;
  const ::Signature* signedmessage_;
  const ::PrivateKey* privatekey_;
  const ::PublicKey* publickey_;
  const ::SymmetriclyEncryptedMessage* symmetriclyencryptedmessage_;
  const ::AsymmetriclyEncryptedMessage* asymmetriclyencryptedmessage_;
  const ::MessageReference* reference_;
} _SignedMessage_default_instance_;

namespace protobuf_message_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Image, imagetype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, all_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, rsvp_by_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, rsvp_email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Post, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, signature_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signature, key_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, country_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, organization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, organizational_unit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, distinguished_name_qualifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, common_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, serial_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DistinguishedName, email_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyId, fingerprint_sha512_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyId, dn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyId, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKey, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKey, encodingtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKey, key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKey, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKey, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKey, encodingtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKey, key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublicKey, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetriclyEncryptedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetriclyEncryptedMessage, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetriclyEncryptedMessage, encryption_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetriclyEncryptedMessage, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetriclyEncryptedMessage, iv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetriclyEncryptedMessage, salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SymmetriclyEncryptedMessage, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsymmetriclyEncryptedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsymmetriclyEncryptedMessage, message_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsymmetriclyEncryptedMessage, dest_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsymmetriclyEncryptedMessage, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AsymmetriclyEncryptedMessage, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageReference, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageReference, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedMessage, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SignedMessage_default_instance_), post_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SignedMessage_default_instance_), signedmessage_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SignedMessage_default_instance_), privatekey_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SignedMessage_default_instance_), publickey_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SignedMessage_default_instance_), symmetriclyencryptedmessage_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SignedMessage_default_instance_), asymmetriclyencryptedmessage_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SignedMessage_default_instance_), reference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedMessage, message_signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedMessage, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedMessage, msg_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Image)},
  { 6, -1, sizeof(Post)},
  { 21, -1, sizeof(Signature)},
  { 29, -1, sizeof(DistinguishedName)},
  { 41, -1, sizeof(KeyId)},
  { 48, -1, sizeof(PrivateKey)},
  { 56, -1, sizeof(PublicKey)},
  { 64, -1, sizeof(SymmetriclyEncryptedMessage)},
  { 74, -1, sizeof(AsymmetriclyEncryptedMessage)},
  { 82, -1, sizeof(MessageReference)},
  { 88, -1, sizeof(SignedMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Image_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Post_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Signature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DistinguishedName_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyId_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrivateKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PublicKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SymmetriclyEncryptedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AsymmetriclyEncryptedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MessageReference_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignedMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _Image_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Post_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Signature_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DistinguishedName_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _KeyId_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PrivateKey_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _PublicKey_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SymmetriclyEncryptedMessage_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _AsymmetriclyEncryptedMessage_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _MessageReference_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SignedMessage_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Image_default_instance_.DefaultConstruct();
  _Post_default_instance_.DefaultConstruct();
  _Signature_default_instance_.DefaultConstruct();
  _DistinguishedName_default_instance_.DefaultConstruct();
  _KeyId_default_instance_.DefaultConstruct();
  _PrivateKey_default_instance_.DefaultConstruct();
  _PublicKey_default_instance_.DefaultConstruct();
  _SymmetriclyEncryptedMessage_default_instance_.DefaultConstruct();
  _AsymmetriclyEncryptedMessage_default_instance_.DefaultConstruct();
  _MessageReference_default_instance_.DefaultConstruct();
  _SignedMessage_default_instance_.DefaultConstruct();
  _Post_default_instance_.get_mutable()->image_ = const_cast< ::Image*>(
      ::Image::internal_default_instance());
  _Signature_default_instance_.get_mutable()->key_id_ = const_cast< ::KeyId*>(
      ::KeyId::internal_default_instance());
  _KeyId_default_instance_.get_mutable()->dn_ = const_cast< ::DistinguishedName*>(
      ::DistinguishedName::internal_default_instance());
  _PrivateKey_default_instance_.get_mutable()->key_ = const_cast< ::SymmetriclyEncryptedMessage*>(
      ::SymmetriclyEncryptedMessage::internal_default_instance());
  _PrivateKey_default_instance_.get_mutable()->key_id_ = const_cast< ::KeyId*>(
      ::KeyId::internal_default_instance());
  _PublicKey_default_instance_.get_mutable()->key_id_ = const_cast< ::KeyId*>(
      ::KeyId::internal_default_instance());
  _AsymmetriclyEncryptedMessage_default_instance_.get_mutable()->dest_key_ = const_cast< ::KeyId*>(
      ::KeyId::internal_default_instance());
  _SignedMessage_default_instance_.post_ = const_cast< ::Post*>(
      ::Post::internal_default_instance());
  _SignedMessage_default_instance_.signedmessage_ = const_cast< ::Signature*>(
      ::Signature::internal_default_instance());
  _SignedMessage_default_instance_.privatekey_ = const_cast< ::PrivateKey*>(
      ::PrivateKey::internal_default_instance());
  _SignedMessage_default_instance_.publickey_ = const_cast< ::PublicKey*>(
      ::PublicKey::internal_default_instance());
  _SignedMessage_default_instance_.symmetriclyencryptedmessage_ = const_cast< ::SymmetriclyEncryptedMessage*>(
      ::SymmetriclyEncryptedMessage::internal_default_instance());
  _SignedMessage_default_instance_.asymmetriclyencryptedmessage_ = const_cast< ::AsymmetriclyEncryptedMessage*>(
      ::AsymmetriclyEncryptedMessage::internal_default_instance());
  _SignedMessage_default_instance_.reference_ = const_cast< ::MessageReference*>(
      ::MessageReference::internal_default_instance());
  _SignedMessage_default_instance_.get_mutable()->message_signature_ = const_cast< ::Signature*>(
      ::Signature::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rmessage.proto\"5\n\005Image\022\r\n\005image\030\001 \001(\014\022"
      "\035\n\timageType\030\002 \001(\0162\n.ImageType\"\316\001\n\004Post\022"
      "\n\n\002id\030\001 \001(\014\022\r\n\005title\030\002 \001(\t\022\023\n\013descriptio"
      "n\030\003 \001(\t\022\020\n\010location\030\004 \001(\t\022\022\n\nstart_time\030"
      "\005 \001(\006\022\017\n\007all_day\030\006 \001(\010\022\020\n\010end_time\030\007 \001(\006"
      "\022\025\n\005image\030\010 \001(\0132\006.Image\022\017\n\007rsvp_by\030\t \001(\006"
      "\022\022\n\nrsvp_email\030\n \001(\t\022\021\n\ttimestamp\030\013 \001(\006\""
      "j\n\tSignature\022\021\n\tsignature\030\002 \001(\014\022&\n\016signa"
      "ture_type\030\003 \001(\0162\016.SignatureType\022\n\n\002id\030\005 "
      "\001(\014\022\026\n\006key_id\030\006 \001(\0132\006.KeyId\"\307\001\n\021Distingu"
      "ishedName\022\017\n\007country\030\001 \001(\t\022\024\n\014organizati"
      "on\030\002 \001(\t\022\033\n\023organizational_unit\030\003 \001(\t\022$\n"
      "\034distinguished_name_qualifier\030\004 \001(\t\022\r\n\005s"
      "tate\030\005 \001(\t\022\023\n\013common_name\030\006 \001(\t\022\025\n\rseria"
      "l_number\030\007 \001(\t\022\r\n\005email\030\010 \001(\t\"e\n\005KeyId\022\032"
      "\n\022fingerprint_sha512\030\001 \001(\014\022\036\n\002dn\030\002 \001(\0132\022"
      ".DistinguishedName\022 \n\004type\030\003 \001(\0162\022.Asymm"
      "etricKeyType\"\203\001\n\nPrivateKey\022)\n\003key\030\002 \001(\013"
      "2\034.SymmetriclyEncryptedMessage\022&\n\014encodi"
      "ngType\030\005 \001(\0162\020.KeyEncodingType\022\026\n\006key_id"
      "\030\006 \001(\0132\006.KeyId\022\n\n\002id\030\007 \001(\014\"d\n\tPublicKey\022"
      "\013\n\003key\030\002 \001(\014\022&\n\014encodingType\030\004 \001(\0162\020.Key"
      "EncodingType\022\026\n\006key_id\030\005 \001(\0132\006.KeyId\022\n\n\002"
      "id\030\006 \001(\014\"\240\001\n\033SymmetriclyEncryptedMessage"
      "\022\"\n\014message_type\030\001 \001(\0162\014.MessageType\022*\n\017"
      "encryption_type\030\002 \001(\0162\021.SymmetricKeyType"
      "\022\013\n\003msg\030\003 \001(\014\022\n\n\002iv\030\004 \001(\014\022\014\n\004salt\030\005 \001(\014\022"
      "\n\n\002id\030\006 \001(\014\"u\n\034AsymmetriclyEncryptedMess"
      "age\022\"\n\014message_type\030\001 \001(\0162\014.MessageType\022"
      "\030\n\010dest_key\030\002 \001(\0132\006.KeyId\022\013\n\003msg\030\004 \001(\014\022\n"
      "\n\002id\030\005 \001(\014\":\n\020MessageReference\022\032\n\004type\030\001"
      " \001(\0162\014.MessageType\022\n\n\002id\030\002 \001(\014\"\220\003\n\rSigne"
      "dMessage\022\025\n\004post\030\001 \001(\0132\005.PostH\000\022#\n\rsigne"
      "dMessage\030\002 \001(\0132\n.SignatureH\000\022!\n\nprivateK"
      "ey\030\003 \001(\0132\013.PrivateKeyH\000\022\037\n\tpublicKey\030\004 \001"
      "(\0132\n.PublicKeyH\000\022C\n\033symmetriclyEncrypted"
      "Message\030\005 \001(\0132\034.SymmetriclyEncryptedMess"
      "ageH\000\022E\n\034asymmetriclyEncryptedMessage\030\006 "
      "\001(\0132\035.AsymmetriclyEncryptedMessageH\000\022&\n\t"
      "reference\030\n \001(\0132\021.MessageReferenceH\000\022%\n\021"
      "message_signature\030\010 \001(\0132\n.Signature\022\021\n\tt"
      "imestamp\030\t \001(\006\022\n\n\002id\030\013 \001(\014B\005\n\003msg*;\n\rSig"
      "natureType\022\023\n\017SHA512withECDSA\020\000\022\025\n\021SHA51"
      "2withEd25519\020\001*@\n\021AsymmetricKeyType\022\r\n\ts"
      "ecp384r1\020\000\022\r\n\tsecp521r1\020\001\022\r\n\tEdDSA_256\020\002"
      "*B\n\020SymmetricKeyType\022.\n*AES_256_GCM_PBKD"
      "F2WithHmacSHA256_65536_128\020\000*&\n\017KeyEncod"
      "ingType\022\t\n\005pkcs8\020\000\022\010\n\004x509\020\001*\025\n\tImageTyp"
      "e\022\010\n\004jpeg\020\000*\212\002\n\013MessageType\022\017\n\013MessagePo"
      "st\020\000\022\024\n\020MessageSignature\020\001\022\025\n\021MessagePri"
      "vateKey\020\002\022\024\n\020MessagePublicKey\020\003\022&\n\"Messa"
      "geSymmetriclyEncryptedMessage\020\004\022\'\n#Messa"
      "geAsymmetriclyEncryptedMessage\020\005\022!\n\035Mess"
      "ageHybridEncryptedMessage\020\006\022\033\n\027MessageRe"
      "ferenceMessage\020\007\022\026\n\022MessageSymetricKey\020d"
      "B\"\n\027org.metamesh.chub.protoB\007Messageb\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_message_2eproto

const ::google::protobuf::EnumDescriptor* SignatureType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool SignatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AsymmetricKeyType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[1];
}
bool AsymmetricKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SymmetricKeyType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[2];
}
bool SymmetricKeyType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KeyEncodingType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[3];
}
bool KeyEncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImageType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[4];
}
bool ImageType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[5];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kImageFieldNumber;
const int Image::kImageTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Image)
}
Image::Image(const Image& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.image().size() > 0) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  imagetype_ = from.imagetype_;
  // @@protoc_insertion_point(copy_constructor:Image)
}

void Image::SharedCtor() {
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagetype_ = 0;
  _cached_size_ = 0;
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:Image)
  SharedDtor();
}

void Image::SharedDtor() {
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Image::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Image::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0].descriptor;
}

const Image& Image::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Image* Image::New(::google::protobuf::Arena* arena) const {
  Image* n = new Image;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:Image)
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagetype_ = 0;
}

bool Image::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Image)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes image = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ImageType imageType = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_imagetype(static_cast< ::ImageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Image)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Image)
  return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Image)
  // bytes image = 1;
  if (this->image().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->image(), output);
  }

  // .ImageType imageType = 2;
  if (this->imagetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->imagetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Image)
  // bytes image = 1;
  if (this->image().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->image(), target);
  }

  // .ImageType imageType = 2;
  if (this->imagetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->imagetype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Image)
  size_t total_size = 0;

  // bytes image = 1;
  if (this->image().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->image());
  }

  // .ImageType imageType = 2;
  if (this->imagetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Image)
  GOOGLE_DCHECK_NE(&from, this);
  const Image* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Image>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Image)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Image)
    MergeFrom(*source);
  }
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Image)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.image().size() > 0) {

    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  if (from.imagetype() != 0) {
    set_imagetype(from.imagetype());
  }
}

void Image::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::Swap(Image* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Image::InternalSwap(Image* other) {
  image_.Swap(&other->image_);
  std::swap(imagetype_, other->imagetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Image::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// bytes image = 1;
void Image::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Image::image() const {
  // @@protoc_insertion_point(field_get:Image.image)
  return image_.GetNoArena();
}
void Image::set_image(const ::std::string& value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Image.image)
}
#if LANG_CXX11
void Image::set_image(::std::string&& value) {
  
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Image.image)
}
#endif
void Image::set_image(const char* value) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Image.image)
}
void Image::set_image(const void* value, size_t size) {
  
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Image.image)
}
::std::string* Image::mutable_image() {
  
  // @@protoc_insertion_point(field_mutable:Image.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Image::release_image() {
  // @@protoc_insertion_point(field_release:Image.image)
  
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Image::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    
  } else {
    
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:Image.image)
}

// .ImageType imageType = 2;
void Image::clear_imagetype() {
  imagetype_ = 0;
}
::ImageType Image::imagetype() const {
  // @@protoc_insertion_point(field_get:Image.imageType)
  return static_cast< ::ImageType >(imagetype_);
}
void Image::set_imagetype(::ImageType value) {
  
  imagetype_ = value;
  // @@protoc_insertion_point(field_set:Image.imageType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Post::kIdFieldNumber;
const int Post::kTitleFieldNumber;
const int Post::kDescriptionFieldNumber;
const int Post::kLocationFieldNumber;
const int Post::kStartTimeFieldNumber;
const int Post::kAllDayFieldNumber;
const int Post::kEndTimeFieldNumber;
const int Post::kImageFieldNumber;
const int Post::kRsvpByFieldNumber;
const int Post::kRsvpEmailFieldNumber;
const int Post::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Post::Post()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Post)
}
Post::Post(const Post& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  rsvp_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.rsvp_email().size() > 0) {
    rsvp_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsvp_email_);
  }
  if (from.has_image()) {
    image_ = new ::Image(*from.image_);
  } else {
    image_ = NULL;
  }
  ::memcpy(&start_time_, &from.start_time_,
    reinterpret_cast<char*>(&all_day_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(all_day_));
  // @@protoc_insertion_point(copy_constructor:Post)
}

void Post::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsvp_email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&image_, 0, reinterpret_cast<char*>(&all_day_) -
    reinterpret_cast<char*>(&image_) + sizeof(all_day_));
  _cached_size_ = 0;
}

Post::~Post() {
  // @@protoc_insertion_point(destructor:Post)
  SharedDtor();
}

void Post::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsvp_email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete image_;
  }
}

void Post::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Post::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[1].descriptor;
}

const Post& Post::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Post* Post::New(::google::protobuf::Arena* arena) const {
  Post* n = new Post;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Post::Clear() {
// @@protoc_insertion_point(message_clear_start:Post)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsvp_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && image_ != NULL) {
    delete image_;
  }
  image_ = NULL;
  ::memset(&start_time_, 0, reinterpret_cast<char*>(&all_day_) -
    reinterpret_cast<char*>(&start_time_) + sizeof(all_day_));
}

bool Post::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Post)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Post.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Post.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Post.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 start_time = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool all_day = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 end_time = 7;
      case 7: {
        if (tag == 57u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Image image = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 rsvp_by = 9;
      case 9: {
        if (tag == 73u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &rsvp_by_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rsvp_email = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsvp_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rsvp_email().data(), this->rsvp_email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Post.rsvp_email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 timestamp = 11;
      case 11: {
        if (tag == 89u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Post)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Post)
  return false;
#undef DO_
}

void Post::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Post)
  // bytes id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // string location = 4;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location(), output);
  }

  // fixed64 start_time = 5;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->start_time(), output);
  }

  // bool all_day = 6;
  if (this->all_day() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->all_day(), output);
  }

  // fixed64 end_time = 7;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->end_time(), output);
  }

  // .Image image = 8;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->image_, output);
  }

  // fixed64 rsvp_by = 9;
  if (this->rsvp_by() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->rsvp_by(), output);
  }

  // string rsvp_email = 10;
  if (this->rsvp_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsvp_email().data(), this->rsvp_email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.rsvp_email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->rsvp_email(), output);
  }

  // fixed64 timestamp = 11;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:Post)
}

::google::protobuf::uint8* Post::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Post)
  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // string location = 4;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->location(), target);
  }

  // fixed64 start_time = 5;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->start_time(), target);
  }

  // bool all_day = 6;
  if (this->all_day() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->all_day(), target);
  }

  // fixed64 end_time = 7;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->end_time(), target);
  }

  // .Image image = 8;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->image_, false, target);
  }

  // fixed64 rsvp_by = 9;
  if (this->rsvp_by() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->rsvp_by(), target);
  }

  // string rsvp_email = 10;
  if (this->rsvp_email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsvp_email().data(), this->rsvp_email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Post.rsvp_email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->rsvp_email(), target);
  }

  // fixed64 timestamp = 11;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Post)
  return target;
}

size_t Post::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Post)
  size_t total_size = 0;

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // string location = 4;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string rsvp_email = 10;
  if (this->rsvp_email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rsvp_email());
  }

  // .Image image = 8;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // fixed64 start_time = 5;
  if (this->start_time() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 end_time = 7;
  if (this->end_time() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 rsvp_by = 9;
  if (this->rsvp_by() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 timestamp = 11;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  // bool all_day = 6;
  if (this->all_day() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Post::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Post)
  GOOGLE_DCHECK_NE(&from, this);
  const Post* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Post>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Post)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Post)
    MergeFrom(*source);
  }
}

void Post::MergeFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Post)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.rsvp_email().size() > 0) {

    rsvp_email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsvp_email_);
  }
  if (from.has_image()) {
    mutable_image()->::Image::MergeFrom(from.image());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.rsvp_by() != 0) {
    set_rsvp_by(from.rsvp_by());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.all_day() != 0) {
    set_all_day(from.all_day());
  }
}

void Post::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Post)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Post::CopyFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Post)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post::IsInitialized() const {
  return true;
}

void Post::Swap(Post* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Post::InternalSwap(Post* other) {
  id_.Swap(&other->id_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  location_.Swap(&other->location_);
  rsvp_email_.Swap(&other->rsvp_email_);
  std::swap(image_, other->image_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(rsvp_by_, other->rsvp_by_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(all_day_, other->all_day_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Post::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Post

// bytes id = 1;
void Post::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Post::id() const {
  // @@protoc_insertion_point(field_get:Post.id)
  return id_.GetNoArena();
}
void Post::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Post.id)
}
#if LANG_CXX11
void Post::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Post.id)
}
#endif
void Post::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Post.id)
}
void Post::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Post.id)
}
::std::string* Post::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Post.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_id() {
  // @@protoc_insertion_point(field_release:Post.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Post.id)
}

// string title = 2;
void Post::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Post::title() const {
  // @@protoc_insertion_point(field_get:Post.title)
  return title_.GetNoArena();
}
void Post::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Post.title)
}
#if LANG_CXX11
void Post::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Post.title)
}
#endif
void Post::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Post.title)
}
void Post::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Post.title)
}
::std::string* Post::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:Post.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_title() {
  // @@protoc_insertion_point(field_release:Post.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:Post.title)
}

// string description = 3;
void Post::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Post::description() const {
  // @@protoc_insertion_point(field_get:Post.description)
  return description_.GetNoArena();
}
void Post::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Post.description)
}
#if LANG_CXX11
void Post::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Post.description)
}
#endif
void Post::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Post.description)
}
void Post::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Post.description)
}
::std::string* Post::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Post.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_description() {
  // @@protoc_insertion_point(field_release:Post.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Post.description)
}

// string location = 4;
void Post::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Post::location() const {
  // @@protoc_insertion_point(field_get:Post.location)
  return location_.GetNoArena();
}
void Post::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Post.location)
}
#if LANG_CXX11
void Post::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Post.location)
}
#endif
void Post::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Post.location)
}
void Post::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Post.location)
}
::std::string* Post::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:Post.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_location() {
  // @@protoc_insertion_point(field_release:Post.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:Post.location)
}

// fixed64 start_time = 5;
void Post::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Post::start_time() const {
  // @@protoc_insertion_point(field_get:Post.start_time)
  return start_time_;
}
void Post::set_start_time(::google::protobuf::uint64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:Post.start_time)
}

// bool all_day = 6;
void Post::clear_all_day() {
  all_day_ = false;
}
bool Post::all_day() const {
  // @@protoc_insertion_point(field_get:Post.all_day)
  return all_day_;
}
void Post::set_all_day(bool value) {
  
  all_day_ = value;
  // @@protoc_insertion_point(field_set:Post.all_day)
}

// fixed64 end_time = 7;
void Post::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Post::end_time() const {
  // @@protoc_insertion_point(field_get:Post.end_time)
  return end_time_;
}
void Post::set_end_time(::google::protobuf::uint64 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:Post.end_time)
}

// .Image image = 8;
bool Post::has_image() const {
  return this != internal_default_instance() && image_ != NULL;
}
void Post::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::Image& Post::image() const {
  // @@protoc_insertion_point(field_get:Post.image)
  return image_ != NULL ? *image_
                         : *::Image::internal_default_instance();
}
::Image* Post::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::Image;
  }
  // @@protoc_insertion_point(field_mutable:Post.image)
  return image_;
}
::Image* Post::release_image() {
  // @@protoc_insertion_point(field_release:Post.image)
  
  ::Image* temp = image_;
  image_ = NULL;
  return temp;
}
void Post::set_allocated_image(::Image* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Post.image)
}

// fixed64 rsvp_by = 9;
void Post::clear_rsvp_by() {
  rsvp_by_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Post::rsvp_by() const {
  // @@protoc_insertion_point(field_get:Post.rsvp_by)
  return rsvp_by_;
}
void Post::set_rsvp_by(::google::protobuf::uint64 value) {
  
  rsvp_by_ = value;
  // @@protoc_insertion_point(field_set:Post.rsvp_by)
}

// string rsvp_email = 10;
void Post::clear_rsvp_email() {
  rsvp_email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Post::rsvp_email() const {
  // @@protoc_insertion_point(field_get:Post.rsvp_email)
  return rsvp_email_.GetNoArena();
}
void Post::set_rsvp_email(const ::std::string& value) {
  
  rsvp_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Post.rsvp_email)
}
#if LANG_CXX11
void Post::set_rsvp_email(::std::string&& value) {
  
  rsvp_email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Post.rsvp_email)
}
#endif
void Post::set_rsvp_email(const char* value) {
  
  rsvp_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Post.rsvp_email)
}
void Post::set_rsvp_email(const char* value, size_t size) {
  
  rsvp_email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Post.rsvp_email)
}
::std::string* Post::mutable_rsvp_email() {
  
  // @@protoc_insertion_point(field_mutable:Post.rsvp_email)
  return rsvp_email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Post::release_rsvp_email() {
  // @@protoc_insertion_point(field_release:Post.rsvp_email)
  
  return rsvp_email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Post::set_allocated_rsvp_email(::std::string* rsvp_email) {
  if (rsvp_email != NULL) {
    
  } else {
    
  }
  rsvp_email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsvp_email);
  // @@protoc_insertion_point(field_set_allocated:Post.rsvp_email)
}

// fixed64 timestamp = 11;
void Post::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Post::timestamp() const {
  // @@protoc_insertion_point(field_get:Post.timestamp)
  return timestamp_;
}
void Post::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:Post.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Signature::kSignatureFieldNumber;
const int Signature::kSignatureTypeFieldNumber;
const int Signature::kIdFieldNumber;
const int Signature::kKeyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Signature::Signature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Signature)
}
Signature::Signature(const Signature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_key_id()) {
    key_id_ = new ::KeyId(*from.key_id_);
  } else {
    key_id_ = NULL;
  }
  signature_type_ = from.signature_type_;
  // @@protoc_insertion_point(copy_constructor:Signature)
}

void Signature::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_id_, 0, reinterpret_cast<char*>(&signature_type_) -
    reinterpret_cast<char*>(&key_id_) + sizeof(signature_type_));
  _cached_size_ = 0;
}

Signature::~Signature() {
  // @@protoc_insertion_point(destructor:Signature)
  SharedDtor();
}

void Signature::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete key_id_;
  }
}

void Signature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signature::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[2].descriptor;
}

const Signature& Signature::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

Signature* Signature::New(::google::protobuf::Arena* arena) const {
  Signature* n = new Signature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Signature::Clear() {
// @@protoc_insertion_point(message_clear_start:Signature)
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && key_id_ != NULL) {
    delete key_id_;
  }
  key_id_ = NULL;
  signature_type_ = 0;
}

bool Signature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Signature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes signature = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SignatureType signature_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_signature_type(static_cast< ::SignatureType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .KeyId key_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Signature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Signature)
  return false;
#undef DO_
}

void Signature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Signature)
  // bytes signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  // .SignatureType signature_type = 3;
  if (this->signature_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->signature_type(), output);
  }

  // bytes id = 5;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->id(), output);
  }

  // .KeyId key_id = 6;
  if (this->has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->key_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:Signature)
}

::google::protobuf::uint8* Signature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Signature)
  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  // .SignatureType signature_type = 3;
  if (this->signature_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->signature_type(), target);
  }

  // bytes id = 5;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->id(), target);
  }

  // .KeyId key_id = 6;
  if (this->has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->key_id_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Signature)
  return target;
}

size_t Signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Signature)
  size_t total_size = 0;

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // bytes id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .KeyId key_id = 6;
  if (this->has_key_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_id_);
  }

  // .SignatureType signature_type = 3;
  if (this->signature_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->signature_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Signature)
  GOOGLE_DCHECK_NE(&from, this);
  const Signature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Signature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Signature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Signature)
    MergeFrom(*source);
  }
}

void Signature::MergeFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_key_id()) {
    mutable_key_id()->::KeyId::MergeFrom(from.key_id());
  }
  if (from.signature_type() != 0) {
    set_signature_type(from.signature_type());
  }
}

void Signature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signature::CopyFrom(const Signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signature::IsInitialized() const {
  return true;
}

void Signature::Swap(Signature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Signature::InternalSwap(Signature* other) {
  signature_.Swap(&other->signature_);
  id_.Swap(&other->id_);
  std::swap(key_id_, other->key_id_);
  std::swap(signature_type_, other->signature_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Signature::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Signature

// bytes signature = 2;
void Signature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Signature::signature() const {
  // @@protoc_insertion_point(field_get:Signature.signature)
  return signature_.GetNoArena();
}
void Signature::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Signature.signature)
}
#if LANG_CXX11
void Signature::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Signature.signature)
}
#endif
void Signature::set_signature(const char* value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Signature.signature)
}
void Signature::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Signature.signature)
}
::std::string* Signature::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:Signature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Signature::release_signature() {
  // @@protoc_insertion_point(field_release:Signature.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Signature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:Signature.signature)
}

// .SignatureType signature_type = 3;
void Signature::clear_signature_type() {
  signature_type_ = 0;
}
::SignatureType Signature::signature_type() const {
  // @@protoc_insertion_point(field_get:Signature.signature_type)
  return static_cast< ::SignatureType >(signature_type_);
}
void Signature::set_signature_type(::SignatureType value) {
  
  signature_type_ = value;
  // @@protoc_insertion_point(field_set:Signature.signature_type)
}

// bytes id = 5;
void Signature::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Signature::id() const {
  // @@protoc_insertion_point(field_get:Signature.id)
  return id_.GetNoArena();
}
void Signature::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Signature.id)
}
#if LANG_CXX11
void Signature::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Signature.id)
}
#endif
void Signature::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Signature.id)
}
void Signature::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Signature.id)
}
::std::string* Signature::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:Signature.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Signature::release_id() {
  // @@protoc_insertion_point(field_release:Signature.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Signature::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Signature.id)
}

// .KeyId key_id = 6;
bool Signature::has_key_id() const {
  return this != internal_default_instance() && key_id_ != NULL;
}
void Signature::clear_key_id() {
  if (GetArenaNoVirtual() == NULL && key_id_ != NULL) delete key_id_;
  key_id_ = NULL;
}
const ::KeyId& Signature::key_id() const {
  // @@protoc_insertion_point(field_get:Signature.key_id)
  return key_id_ != NULL ? *key_id_
                         : *::KeyId::internal_default_instance();
}
::KeyId* Signature::mutable_key_id() {
  
  if (key_id_ == NULL) {
    key_id_ = new ::KeyId;
  }
  // @@protoc_insertion_point(field_mutable:Signature.key_id)
  return key_id_;
}
::KeyId* Signature::release_key_id() {
  // @@protoc_insertion_point(field_release:Signature.key_id)
  
  ::KeyId* temp = key_id_;
  key_id_ = NULL;
  return temp;
}
void Signature::set_allocated_key_id(::KeyId* key_id) {
  delete key_id_;
  key_id_ = key_id;
  if (key_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Signature.key_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DistinguishedName::kCountryFieldNumber;
const int DistinguishedName::kOrganizationFieldNumber;
const int DistinguishedName::kOrganizationalUnitFieldNumber;
const int DistinguishedName::kDistinguishedNameQualifierFieldNumber;
const int DistinguishedName::kStateFieldNumber;
const int DistinguishedName::kCommonNameFieldNumber;
const int DistinguishedName::kSerialNumberFieldNumber;
const int DistinguishedName::kEmailFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DistinguishedName::DistinguishedName()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DistinguishedName)
}
DistinguishedName::DistinguishedName(const DistinguishedName& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.country().size() > 0) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  organization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.organization().size() > 0) {
    organization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_);
  }
  organizational_unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.organizational_unit().size() > 0) {
    organizational_unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organizational_unit_);
  }
  distinguished_name_qualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.distinguished_name_qualifier().size() > 0) {
    distinguished_name_qualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.distinguished_name_qualifier_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.state().size() > 0) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  common_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.common_name().size() > 0) {
    common_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.common_name_);
  }
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.serial_number().size() > 0) {
    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
  // @@protoc_insertion_point(copy_constructor:DistinguishedName)
}

void DistinguishedName::SharedCtor() {
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organizational_unit_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distinguished_name_qualifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DistinguishedName::~DistinguishedName() {
  // @@protoc_insertion_point(destructor:DistinguishedName)
  SharedDtor();
}

void DistinguishedName::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organizational_unit_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distinguished_name_qualifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DistinguishedName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DistinguishedName::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[3].descriptor;
}

const DistinguishedName& DistinguishedName::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

DistinguishedName* DistinguishedName::New(::google::protobuf::Arena* arena) const {
  DistinguishedName* n = new DistinguishedName;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DistinguishedName::Clear() {
// @@protoc_insertion_point(message_clear_start:DistinguishedName)
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  organizational_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  distinguished_name_qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DistinguishedName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DistinguishedName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string country = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DistinguishedName.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string organization = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organization()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->organization().data(), this->organization().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DistinguishedName.organization"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string organizational_unit = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_organizational_unit()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->organizational_unit().data(), this->organizational_unit().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DistinguishedName.organizational_unit"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string distinguished_name_qualifier = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_distinguished_name_qualifier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->distinguished_name_qualifier().data(), this->distinguished_name_qualifier().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DistinguishedName.distinguished_name_qualifier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), this->state().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DistinguishedName.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string common_name = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_common_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->common_name().data(), this->common_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DistinguishedName.common_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serial_number = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serial_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->serial_number().data(), this->serial_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DistinguishedName.serial_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "DistinguishedName.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DistinguishedName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DistinguishedName)
  return false;
#undef DO_
}

void DistinguishedName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DistinguishedName)
  // string country = 1;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country(), output);
  }

  // string organization = 2;
  if (this->organization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.organization");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->organization(), output);
  }

  // string organizational_unit = 3;
  if (this->organizational_unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->organizational_unit().data(), this->organizational_unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.organizational_unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->organizational_unit(), output);
  }

  // string distinguished_name_qualifier = 4;
  if (this->distinguished_name_qualifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->distinguished_name_qualifier().data(), this->distinguished_name_qualifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.distinguished_name_qualifier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->distinguished_name_qualifier(), output);
  }

  // string state = 5;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->state(), output);
  }

  // string common_name = 6;
  if (this->common_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->common_name().data(), this->common_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.common_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->common_name(), output);
  }

  // string serial_number = 7;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.serial_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->serial_number(), output);
  }

  // string email = 8;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->email(), output);
  }

  // @@protoc_insertion_point(serialize_end:DistinguishedName)
}

::google::protobuf::uint8* DistinguishedName::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DistinguishedName)
  // string country = 1;
  if (this->country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country(), target);
  }

  // string organization = 2;
  if (this->organization().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->organization().data(), this->organization().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.organization");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->organization(), target);
  }

  // string organizational_unit = 3;
  if (this->organizational_unit().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->organizational_unit().data(), this->organizational_unit().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.organizational_unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->organizational_unit(), target);
  }

  // string distinguished_name_qualifier = 4;
  if (this->distinguished_name_qualifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->distinguished_name_qualifier().data(), this->distinguished_name_qualifier().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.distinguished_name_qualifier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->distinguished_name_qualifier(), target);
  }

  // string state = 5;
  if (this->state().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), this->state().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->state(), target);
  }

  // string common_name = 6;
  if (this->common_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->common_name().data(), this->common_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.common_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->common_name(), target);
  }

  // string serial_number = 7;
  if (this->serial_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->serial_number().data(), this->serial_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.serial_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->serial_number(), target);
  }

  // string email = 8;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "DistinguishedName.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->email(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:DistinguishedName)
  return target;
}

size_t DistinguishedName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DistinguishedName)
  size_t total_size = 0;

  // string country = 1;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());
  }

  // string organization = 2;
  if (this->organization().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->organization());
  }

  // string organizational_unit = 3;
  if (this->organizational_unit().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->organizational_unit());
  }

  // string distinguished_name_qualifier = 4;
  if (this->distinguished_name_qualifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->distinguished_name_qualifier());
  }

  // string state = 5;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string common_name = 6;
  if (this->common_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->common_name());
  }

  // string serial_number = 7;
  if (this->serial_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->serial_number());
  }

  // string email = 8;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DistinguishedName::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DistinguishedName)
  GOOGLE_DCHECK_NE(&from, this);
  const DistinguishedName* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DistinguishedName>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DistinguishedName)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DistinguishedName)
    MergeFrom(*source);
  }
}

void DistinguishedName::MergeFrom(const DistinguishedName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DistinguishedName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.organization().size() > 0) {

    organization_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organization_);
  }
  if (from.organizational_unit().size() > 0) {

    organizational_unit_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.organizational_unit_);
  }
  if (from.distinguished_name_qualifier().size() > 0) {

    distinguished_name_qualifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.distinguished_name_qualifier_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.common_name().size() > 0) {

    common_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.common_name_);
  }
  if (from.serial_number().size() > 0) {

    serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serial_number_);
  }
  if (from.email().size() > 0) {

    email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
  }
}

void DistinguishedName::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DistinguishedName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistinguishedName::CopyFrom(const DistinguishedName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DistinguishedName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistinguishedName::IsInitialized() const {
  return true;
}

void DistinguishedName::Swap(DistinguishedName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DistinguishedName::InternalSwap(DistinguishedName* other) {
  country_.Swap(&other->country_);
  organization_.Swap(&other->organization_);
  organizational_unit_.Swap(&other->organizational_unit_);
  distinguished_name_qualifier_.Swap(&other->distinguished_name_qualifier_);
  state_.Swap(&other->state_);
  common_name_.Swap(&other->common_name_);
  serial_number_.Swap(&other->serial_number_);
  email_.Swap(&other->email_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DistinguishedName::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DistinguishedName

// string country = 1;
void DistinguishedName::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DistinguishedName::country() const {
  // @@protoc_insertion_point(field_get:DistinguishedName.country)
  return country_.GetNoArena();
}
void DistinguishedName::set_country(const ::std::string& value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistinguishedName.country)
}
#if LANG_CXX11
void DistinguishedName::set_country(::std::string&& value) {
  
  country_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistinguishedName.country)
}
#endif
void DistinguishedName::set_country(const char* value) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistinguishedName.country)
}
void DistinguishedName::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistinguishedName.country)
}
::std::string* DistinguishedName::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:DistinguishedName.country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistinguishedName::release_country() {
  // @@protoc_insertion_point(field_release:DistinguishedName.country)
  
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistinguishedName::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:DistinguishedName.country)
}

// string organization = 2;
void DistinguishedName::clear_organization() {
  organization_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DistinguishedName::organization() const {
  // @@protoc_insertion_point(field_get:DistinguishedName.organization)
  return organization_.GetNoArena();
}
void DistinguishedName::set_organization(const ::std::string& value) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistinguishedName.organization)
}
#if LANG_CXX11
void DistinguishedName::set_organization(::std::string&& value) {
  
  organization_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistinguishedName.organization)
}
#endif
void DistinguishedName::set_organization(const char* value) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistinguishedName.organization)
}
void DistinguishedName::set_organization(const char* value, size_t size) {
  
  organization_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistinguishedName.organization)
}
::std::string* DistinguishedName::mutable_organization() {
  
  // @@protoc_insertion_point(field_mutable:DistinguishedName.organization)
  return organization_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistinguishedName::release_organization() {
  // @@protoc_insertion_point(field_release:DistinguishedName.organization)
  
  return organization_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistinguishedName::set_allocated_organization(::std::string* organization) {
  if (organization != NULL) {
    
  } else {
    
  }
  organization_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organization);
  // @@protoc_insertion_point(field_set_allocated:DistinguishedName.organization)
}

// string organizational_unit = 3;
void DistinguishedName::clear_organizational_unit() {
  organizational_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DistinguishedName::organizational_unit() const {
  // @@protoc_insertion_point(field_get:DistinguishedName.organizational_unit)
  return organizational_unit_.GetNoArena();
}
void DistinguishedName::set_organizational_unit(const ::std::string& value) {
  
  organizational_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistinguishedName.organizational_unit)
}
#if LANG_CXX11
void DistinguishedName::set_organizational_unit(::std::string&& value) {
  
  organizational_unit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistinguishedName.organizational_unit)
}
#endif
void DistinguishedName::set_organizational_unit(const char* value) {
  
  organizational_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistinguishedName.organizational_unit)
}
void DistinguishedName::set_organizational_unit(const char* value, size_t size) {
  
  organizational_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistinguishedName.organizational_unit)
}
::std::string* DistinguishedName::mutable_organizational_unit() {
  
  // @@protoc_insertion_point(field_mutable:DistinguishedName.organizational_unit)
  return organizational_unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistinguishedName::release_organizational_unit() {
  // @@protoc_insertion_point(field_release:DistinguishedName.organizational_unit)
  
  return organizational_unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistinguishedName::set_allocated_organizational_unit(::std::string* organizational_unit) {
  if (organizational_unit != NULL) {
    
  } else {
    
  }
  organizational_unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), organizational_unit);
  // @@protoc_insertion_point(field_set_allocated:DistinguishedName.organizational_unit)
}

// string distinguished_name_qualifier = 4;
void DistinguishedName::clear_distinguished_name_qualifier() {
  distinguished_name_qualifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DistinguishedName::distinguished_name_qualifier() const {
  // @@protoc_insertion_point(field_get:DistinguishedName.distinguished_name_qualifier)
  return distinguished_name_qualifier_.GetNoArena();
}
void DistinguishedName::set_distinguished_name_qualifier(const ::std::string& value) {
  
  distinguished_name_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistinguishedName.distinguished_name_qualifier)
}
#if LANG_CXX11
void DistinguishedName::set_distinguished_name_qualifier(::std::string&& value) {
  
  distinguished_name_qualifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistinguishedName.distinguished_name_qualifier)
}
#endif
void DistinguishedName::set_distinguished_name_qualifier(const char* value) {
  
  distinguished_name_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistinguishedName.distinguished_name_qualifier)
}
void DistinguishedName::set_distinguished_name_qualifier(const char* value, size_t size) {
  
  distinguished_name_qualifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistinguishedName.distinguished_name_qualifier)
}
::std::string* DistinguishedName::mutable_distinguished_name_qualifier() {
  
  // @@protoc_insertion_point(field_mutable:DistinguishedName.distinguished_name_qualifier)
  return distinguished_name_qualifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistinguishedName::release_distinguished_name_qualifier() {
  // @@protoc_insertion_point(field_release:DistinguishedName.distinguished_name_qualifier)
  
  return distinguished_name_qualifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistinguishedName::set_allocated_distinguished_name_qualifier(::std::string* distinguished_name_qualifier) {
  if (distinguished_name_qualifier != NULL) {
    
  } else {
    
  }
  distinguished_name_qualifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distinguished_name_qualifier);
  // @@protoc_insertion_point(field_set_allocated:DistinguishedName.distinguished_name_qualifier)
}

// string state = 5;
void DistinguishedName::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DistinguishedName::state() const {
  // @@protoc_insertion_point(field_get:DistinguishedName.state)
  return state_.GetNoArena();
}
void DistinguishedName::set_state(const ::std::string& value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistinguishedName.state)
}
#if LANG_CXX11
void DistinguishedName::set_state(::std::string&& value) {
  
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistinguishedName.state)
}
#endif
void DistinguishedName::set_state(const char* value) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistinguishedName.state)
}
void DistinguishedName::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistinguishedName.state)
}
::std::string* DistinguishedName::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:DistinguishedName.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistinguishedName::release_state() {
  // @@protoc_insertion_point(field_release:DistinguishedName.state)
  
  return state_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistinguishedName::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:DistinguishedName.state)
}

// string common_name = 6;
void DistinguishedName::clear_common_name() {
  common_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DistinguishedName::common_name() const {
  // @@protoc_insertion_point(field_get:DistinguishedName.common_name)
  return common_name_.GetNoArena();
}
void DistinguishedName::set_common_name(const ::std::string& value) {
  
  common_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistinguishedName.common_name)
}
#if LANG_CXX11
void DistinguishedName::set_common_name(::std::string&& value) {
  
  common_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistinguishedName.common_name)
}
#endif
void DistinguishedName::set_common_name(const char* value) {
  
  common_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistinguishedName.common_name)
}
void DistinguishedName::set_common_name(const char* value, size_t size) {
  
  common_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistinguishedName.common_name)
}
::std::string* DistinguishedName::mutable_common_name() {
  
  // @@protoc_insertion_point(field_mutable:DistinguishedName.common_name)
  return common_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistinguishedName::release_common_name() {
  // @@protoc_insertion_point(field_release:DistinguishedName.common_name)
  
  return common_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistinguishedName::set_allocated_common_name(::std::string* common_name) {
  if (common_name != NULL) {
    
  } else {
    
  }
  common_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), common_name);
  // @@protoc_insertion_point(field_set_allocated:DistinguishedName.common_name)
}

// string serial_number = 7;
void DistinguishedName::clear_serial_number() {
  serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DistinguishedName::serial_number() const {
  // @@protoc_insertion_point(field_get:DistinguishedName.serial_number)
  return serial_number_.GetNoArena();
}
void DistinguishedName::set_serial_number(const ::std::string& value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistinguishedName.serial_number)
}
#if LANG_CXX11
void DistinguishedName::set_serial_number(::std::string&& value) {
  
  serial_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistinguishedName.serial_number)
}
#endif
void DistinguishedName::set_serial_number(const char* value) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistinguishedName.serial_number)
}
void DistinguishedName::set_serial_number(const char* value, size_t size) {
  
  serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistinguishedName.serial_number)
}
::std::string* DistinguishedName::mutable_serial_number() {
  
  // @@protoc_insertion_point(field_mutable:DistinguishedName.serial_number)
  return serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistinguishedName::release_serial_number() {
  // @@protoc_insertion_point(field_release:DistinguishedName.serial_number)
  
  return serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistinguishedName::set_allocated_serial_number(::std::string* serial_number) {
  if (serial_number != NULL) {
    
  } else {
    
  }
  serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serial_number);
  // @@protoc_insertion_point(field_set_allocated:DistinguishedName.serial_number)
}

// string email = 8;
void DistinguishedName::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DistinguishedName::email() const {
  // @@protoc_insertion_point(field_get:DistinguishedName.email)
  return email_.GetNoArena();
}
void DistinguishedName::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DistinguishedName.email)
}
#if LANG_CXX11
void DistinguishedName::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DistinguishedName.email)
}
#endif
void DistinguishedName::set_email(const char* value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DistinguishedName.email)
}
void DistinguishedName::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DistinguishedName.email)
}
::std::string* DistinguishedName::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:DistinguishedName.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DistinguishedName::release_email() {
  // @@protoc_insertion_point(field_release:DistinguishedName.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DistinguishedName::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:DistinguishedName.email)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyId::kFingerprintSha512FieldNumber;
const int KeyId::kDnFieldNumber;
const int KeyId::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyId::KeyId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:KeyId)
}
KeyId::KeyId(const KeyId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fingerprint_sha512_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fingerprint_sha512().size() > 0) {
    fingerprint_sha512_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fingerprint_sha512_);
  }
  if (from.has_dn()) {
    dn_ = new ::DistinguishedName(*from.dn_);
  } else {
    dn_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:KeyId)
}

void KeyId::SharedCtor() {
  fingerprint_sha512_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dn_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&dn_) + sizeof(type_));
  _cached_size_ = 0;
}

KeyId::~KeyId() {
  // @@protoc_insertion_point(destructor:KeyId)
  SharedDtor();
}

void KeyId::SharedDtor() {
  fingerprint_sha512_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete dn_;
  }
}

void KeyId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyId::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[4].descriptor;
}

const KeyId& KeyId::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyId* KeyId::New(::google::protobuf::Arena* arena) const {
  KeyId* n = new KeyId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyId::Clear() {
// @@protoc_insertion_point(message_clear_start:KeyId)
  fingerprint_sha512_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && dn_ != NULL) {
    delete dn_;
  }
  dn_ = NULL;
  type_ = 0;
}

bool KeyId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KeyId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes fingerprint_sha512 = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_fingerprint_sha512()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .DistinguishedName dn = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AsymmetricKeyType type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::AsymmetricKeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KeyId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KeyId)
  return false;
#undef DO_
}

void KeyId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KeyId)
  // bytes fingerprint_sha512 = 1;
  if (this->fingerprint_sha512().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->fingerprint_sha512(), output);
  }

  // .DistinguishedName dn = 2;
  if (this->has_dn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dn_, output);
  }

  // .AsymmetricKeyType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:KeyId)
}

::google::protobuf::uint8* KeyId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:KeyId)
  // bytes fingerprint_sha512 = 1;
  if (this->fingerprint_sha512().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->fingerprint_sha512(), target);
  }

  // .DistinguishedName dn = 2;
  if (this->has_dn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dn_, false, target);
  }

  // .AsymmetricKeyType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:KeyId)
  return target;
}

size_t KeyId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeyId)
  size_t total_size = 0;

  // bytes fingerprint_sha512 = 1;
  if (this->fingerprint_sha512().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->fingerprint_sha512());
  }

  // .DistinguishedName dn = 2;
  if (this->has_dn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dn_);
  }

  // .AsymmetricKeyType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KeyId)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KeyId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KeyId)
    MergeFrom(*source);
  }
}

void KeyId::MergeFrom(const KeyId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KeyId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.fingerprint_sha512().size() > 0) {

    fingerprint_sha512_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fingerprint_sha512_);
  }
  if (from.has_dn()) {
    mutable_dn()->::DistinguishedName::MergeFrom(from.dn());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void KeyId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KeyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyId::CopyFrom(const KeyId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeyId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyId::IsInitialized() const {
  return true;
}

void KeyId::Swap(KeyId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyId::InternalSwap(KeyId* other) {
  fingerprint_sha512_.Swap(&other->fingerprint_sha512_);
  std::swap(dn_, other->dn_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyId::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyId

// bytes fingerprint_sha512 = 1;
void KeyId::clear_fingerprint_sha512() {
  fingerprint_sha512_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& KeyId::fingerprint_sha512() const {
  // @@protoc_insertion_point(field_get:KeyId.fingerprint_sha512)
  return fingerprint_sha512_.GetNoArena();
}
void KeyId::set_fingerprint_sha512(const ::std::string& value) {
  
  fingerprint_sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:KeyId.fingerprint_sha512)
}
#if LANG_CXX11
void KeyId::set_fingerprint_sha512(::std::string&& value) {
  
  fingerprint_sha512_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:KeyId.fingerprint_sha512)
}
#endif
void KeyId::set_fingerprint_sha512(const char* value) {
  
  fingerprint_sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:KeyId.fingerprint_sha512)
}
void KeyId::set_fingerprint_sha512(const void* value, size_t size) {
  
  fingerprint_sha512_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:KeyId.fingerprint_sha512)
}
::std::string* KeyId::mutable_fingerprint_sha512() {
  
  // @@protoc_insertion_point(field_mutable:KeyId.fingerprint_sha512)
  return fingerprint_sha512_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* KeyId::release_fingerprint_sha512() {
  // @@protoc_insertion_point(field_release:KeyId.fingerprint_sha512)
  
  return fingerprint_sha512_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void KeyId::set_allocated_fingerprint_sha512(::std::string* fingerprint_sha512) {
  if (fingerprint_sha512 != NULL) {
    
  } else {
    
  }
  fingerprint_sha512_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fingerprint_sha512);
  // @@protoc_insertion_point(field_set_allocated:KeyId.fingerprint_sha512)
}

// .DistinguishedName dn = 2;
bool KeyId::has_dn() const {
  return this != internal_default_instance() && dn_ != NULL;
}
void KeyId::clear_dn() {
  if (GetArenaNoVirtual() == NULL && dn_ != NULL) delete dn_;
  dn_ = NULL;
}
const ::DistinguishedName& KeyId::dn() const {
  // @@protoc_insertion_point(field_get:KeyId.dn)
  return dn_ != NULL ? *dn_
                         : *::DistinguishedName::internal_default_instance();
}
::DistinguishedName* KeyId::mutable_dn() {
  
  if (dn_ == NULL) {
    dn_ = new ::DistinguishedName;
  }
  // @@protoc_insertion_point(field_mutable:KeyId.dn)
  return dn_;
}
::DistinguishedName* KeyId::release_dn() {
  // @@protoc_insertion_point(field_release:KeyId.dn)
  
  ::DistinguishedName* temp = dn_;
  dn_ = NULL;
  return temp;
}
void KeyId::set_allocated_dn(::DistinguishedName* dn) {
  delete dn_;
  dn_ = dn;
  if (dn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:KeyId.dn)
}

// .AsymmetricKeyType type = 3;
void KeyId::clear_type() {
  type_ = 0;
}
::AsymmetricKeyType KeyId::type() const {
  // @@protoc_insertion_point(field_get:KeyId.type)
  return static_cast< ::AsymmetricKeyType >(type_);
}
void KeyId::set_type(::AsymmetricKeyType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:KeyId.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrivateKey::kKeyFieldNumber;
const int PrivateKey::kEncodingTypeFieldNumber;
const int PrivateKey::kKeyIdFieldNumber;
const int PrivateKey::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrivateKey::PrivateKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PrivateKey)
}
PrivateKey::PrivateKey(const PrivateKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_key()) {
    key_ = new ::SymmetriclyEncryptedMessage(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_key_id()) {
    key_id_ = new ::KeyId(*from.key_id_);
  } else {
    key_id_ = NULL;
  }
  encodingtype_ = from.encodingtype_;
  // @@protoc_insertion_point(copy_constructor:PrivateKey)
}

void PrivateKey::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, reinterpret_cast<char*>(&encodingtype_) -
    reinterpret_cast<char*>(&key_) + sizeof(encodingtype_));
  _cached_size_ = 0;
}

PrivateKey::~PrivateKey() {
  // @@protoc_insertion_point(destructor:PrivateKey)
  SharedDtor();
}

void PrivateKey::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete key_;
  }
  if (this != internal_default_instance()) {
    delete key_id_;
  }
}

void PrivateKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateKey::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[5].descriptor;
}

const PrivateKey& PrivateKey::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrivateKey* PrivateKey::New(::google::protobuf::Arena* arena) const {
  PrivateKey* n = new PrivateKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrivateKey::Clear() {
// @@protoc_insertion_point(message_clear_start:PrivateKey)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_id_ != NULL) {
    delete key_id_;
  }
  key_id_ = NULL;
  encodingtype_ = 0;
}

bool PrivateKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PrivateKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .SymmetriclyEncryptedMessage key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .KeyEncodingType encodingType = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encodingtype(static_cast< ::KeyEncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .KeyId key_id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PrivateKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PrivateKey)
  return false;
#undef DO_
}

void PrivateKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PrivateKey)
  // .SymmetriclyEncryptedMessage key = 2;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->key_, output);
  }

  // .KeyEncodingType encodingType = 5;
  if (this->encodingtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->encodingtype(), output);
  }

  // .KeyId key_id = 6;
  if (this->has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->key_id_, output);
  }

  // bytes id = 7;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:PrivateKey)
}

::google::protobuf::uint8* PrivateKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PrivateKey)
  // .SymmetriclyEncryptedMessage key = 2;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->key_, false, target);
  }

  // .KeyEncodingType encodingType = 5;
  if (this->encodingtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->encodingtype(), target);
  }

  // .KeyId key_id = 6;
  if (this->has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->key_id_, false, target);
  }

  // bytes id = 7;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PrivateKey)
  return target;
}

size_t PrivateKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PrivateKey)
  size_t total_size = 0;

  // bytes id = 7;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .SymmetriclyEncryptedMessage key = 2;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // .KeyId key_id = 6;
  if (this->has_key_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_id_);
  }

  // .KeyEncodingType encodingType = 5;
  if (this->encodingtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encodingtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PrivateKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PrivateKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrivateKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PrivateKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PrivateKey)
    MergeFrom(*source);
  }
}

void PrivateKey::MergeFrom(const PrivateKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PrivateKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_key()) {
    mutable_key()->::SymmetriclyEncryptedMessage::MergeFrom(from.key());
  }
  if (from.has_key_id()) {
    mutable_key_id()->::KeyId::MergeFrom(from.key_id());
  }
  if (from.encodingtype() != 0) {
    set_encodingtype(from.encodingtype());
  }
}

void PrivateKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PrivateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateKey::CopyFrom(const PrivateKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PrivateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateKey::IsInitialized() const {
  return true;
}

void PrivateKey::Swap(PrivateKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrivateKey::InternalSwap(PrivateKey* other) {
  id_.Swap(&other->id_);
  std::swap(key_, other->key_);
  std::swap(key_id_, other->key_id_);
  std::swap(encodingtype_, other->encodingtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrivateKey::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrivateKey

// .SymmetriclyEncryptedMessage key = 2;
bool PrivateKey::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void PrivateKey::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::SymmetriclyEncryptedMessage& PrivateKey::key() const {
  // @@protoc_insertion_point(field_get:PrivateKey.key)
  return key_ != NULL ? *key_
                         : *::SymmetriclyEncryptedMessage::internal_default_instance();
}
::SymmetriclyEncryptedMessage* PrivateKey::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::SymmetriclyEncryptedMessage;
  }
  // @@protoc_insertion_point(field_mutable:PrivateKey.key)
  return key_;
}
::SymmetriclyEncryptedMessage* PrivateKey::release_key() {
  // @@protoc_insertion_point(field_release:PrivateKey.key)
  
  ::SymmetriclyEncryptedMessage* temp = key_;
  key_ = NULL;
  return temp;
}
void PrivateKey::set_allocated_key(::SymmetriclyEncryptedMessage* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PrivateKey.key)
}

// .KeyEncodingType encodingType = 5;
void PrivateKey::clear_encodingtype() {
  encodingtype_ = 0;
}
::KeyEncodingType PrivateKey::encodingtype() const {
  // @@protoc_insertion_point(field_get:PrivateKey.encodingType)
  return static_cast< ::KeyEncodingType >(encodingtype_);
}
void PrivateKey::set_encodingtype(::KeyEncodingType value) {
  
  encodingtype_ = value;
  // @@protoc_insertion_point(field_set:PrivateKey.encodingType)
}

// .KeyId key_id = 6;
bool PrivateKey::has_key_id() const {
  return this != internal_default_instance() && key_id_ != NULL;
}
void PrivateKey::clear_key_id() {
  if (GetArenaNoVirtual() == NULL && key_id_ != NULL) delete key_id_;
  key_id_ = NULL;
}
const ::KeyId& PrivateKey::key_id() const {
  // @@protoc_insertion_point(field_get:PrivateKey.key_id)
  return key_id_ != NULL ? *key_id_
                         : *::KeyId::internal_default_instance();
}
::KeyId* PrivateKey::mutable_key_id() {
  
  if (key_id_ == NULL) {
    key_id_ = new ::KeyId;
  }
  // @@protoc_insertion_point(field_mutable:PrivateKey.key_id)
  return key_id_;
}
::KeyId* PrivateKey::release_key_id() {
  // @@protoc_insertion_point(field_release:PrivateKey.key_id)
  
  ::KeyId* temp = key_id_;
  key_id_ = NULL;
  return temp;
}
void PrivateKey::set_allocated_key_id(::KeyId* key_id) {
  delete key_id_;
  key_id_ = key_id;
  if (key_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PrivateKey.key_id)
}

// bytes id = 7;
void PrivateKey::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PrivateKey::id() const {
  // @@protoc_insertion_point(field_get:PrivateKey.id)
  return id_.GetNoArena();
}
void PrivateKey::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PrivateKey.id)
}
#if LANG_CXX11
void PrivateKey::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PrivateKey.id)
}
#endif
void PrivateKey::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PrivateKey.id)
}
void PrivateKey::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PrivateKey.id)
}
::std::string* PrivateKey::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:PrivateKey.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PrivateKey::release_id() {
  // @@protoc_insertion_point(field_release:PrivateKey.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PrivateKey::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:PrivateKey.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublicKey::kKeyFieldNumber;
const int PublicKey::kEncodingTypeFieldNumber;
const int PublicKey::kKeyIdFieldNumber;
const int PublicKey::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublicKey::PublicKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PublicKey)
}
PublicKey::PublicKey(const PublicKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_key_id()) {
    key_id_ = new ::KeyId(*from.key_id_);
  } else {
    key_id_ = NULL;
  }
  encodingtype_ = from.encodingtype_;
  // @@protoc_insertion_point(copy_constructor:PublicKey)
}

void PublicKey::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_id_, 0, reinterpret_cast<char*>(&encodingtype_) -
    reinterpret_cast<char*>(&key_id_) + sizeof(encodingtype_));
  _cached_size_ = 0;
}

PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:PublicKey)
  SharedDtor();
}

void PublicKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete key_id_;
  }
}

void PublicKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublicKey::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[6].descriptor;
}

const PublicKey& PublicKey::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

PublicKey* PublicKey::New(::google::protobuf::Arena* arena) const {
  PublicKey* n = new PublicKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:PublicKey)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && key_id_ != NULL) {
    delete key_id_;
  }
  key_id_ = NULL;
  encodingtype_ = 0;
}

bool PublicKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PublicKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .KeyEncodingType encodingType = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encodingtype(static_cast< ::KeyEncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .KeyId key_id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PublicKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PublicKey)
  return false;
#undef DO_
}

void PublicKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PublicKey)
  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // .KeyEncodingType encodingType = 4;
  if (this->encodingtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->encodingtype(), output);
  }

  // .KeyId key_id = 5;
  if (this->has_key_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->key_id_, output);
  }

  // bytes id = 6;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:PublicKey)
}

::google::protobuf::uint8* PublicKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PublicKey)
  // bytes key = 2;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }

  // .KeyEncodingType encodingType = 4;
  if (this->encodingtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->encodingtype(), target);
  }

  // .KeyId key_id = 5;
  if (this->has_key_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->key_id_, false, target);
  }

  // bytes id = 6;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PublicKey)
  return target;
}

size_t PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PublicKey)
  size_t total_size = 0;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // bytes id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .KeyId key_id = 5;
  if (this->has_key_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_id_);
  }

  // .KeyEncodingType encodingType = 4;
  if (this->encodingtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encodingtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublicKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  const PublicKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublicKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PublicKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PublicKey)
    MergeFrom(*source);
  }
}

void PublicKey::MergeFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_key_id()) {
    mutable_key_id()->::KeyId::MergeFrom(from.key_id());
  }
  if (from.encodingtype() != 0) {
    set_encodingtype(from.encodingtype());
  }
}

void PublicKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKey::IsInitialized() const {
  return true;
}

void PublicKey::Swap(PublicKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublicKey::InternalSwap(PublicKey* other) {
  key_.Swap(&other->key_);
  id_.Swap(&other->id_);
  std::swap(key_id_, other->key_id_);
  std::swap(encodingtype_, other->encodingtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublicKey::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PublicKey

// bytes key = 2;
void PublicKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PublicKey::key() const {
  // @@protoc_insertion_point(field_get:PublicKey.key)
  return key_.GetNoArena();
}
void PublicKey::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PublicKey.key)
}
#if LANG_CXX11
void PublicKey::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PublicKey.key)
}
#endif
void PublicKey::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PublicKey.key)
}
void PublicKey::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PublicKey.key)
}
::std::string* PublicKey::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:PublicKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicKey::release_key() {
  // @@protoc_insertion_point(field_release:PublicKey.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicKey::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:PublicKey.key)
}

// .KeyEncodingType encodingType = 4;
void PublicKey::clear_encodingtype() {
  encodingtype_ = 0;
}
::KeyEncodingType PublicKey::encodingtype() const {
  // @@protoc_insertion_point(field_get:PublicKey.encodingType)
  return static_cast< ::KeyEncodingType >(encodingtype_);
}
void PublicKey::set_encodingtype(::KeyEncodingType value) {
  
  encodingtype_ = value;
  // @@protoc_insertion_point(field_set:PublicKey.encodingType)
}

// .KeyId key_id = 5;
bool PublicKey::has_key_id() const {
  return this != internal_default_instance() && key_id_ != NULL;
}
void PublicKey::clear_key_id() {
  if (GetArenaNoVirtual() == NULL && key_id_ != NULL) delete key_id_;
  key_id_ = NULL;
}
const ::KeyId& PublicKey::key_id() const {
  // @@protoc_insertion_point(field_get:PublicKey.key_id)
  return key_id_ != NULL ? *key_id_
                         : *::KeyId::internal_default_instance();
}
::KeyId* PublicKey::mutable_key_id() {
  
  if (key_id_ == NULL) {
    key_id_ = new ::KeyId;
  }
  // @@protoc_insertion_point(field_mutable:PublicKey.key_id)
  return key_id_;
}
::KeyId* PublicKey::release_key_id() {
  // @@protoc_insertion_point(field_release:PublicKey.key_id)
  
  ::KeyId* temp = key_id_;
  key_id_ = NULL;
  return temp;
}
void PublicKey::set_allocated_key_id(::KeyId* key_id) {
  delete key_id_;
  key_id_ = key_id;
  if (key_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PublicKey.key_id)
}

// bytes id = 6;
void PublicKey::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PublicKey::id() const {
  // @@protoc_insertion_point(field_get:PublicKey.id)
  return id_.GetNoArena();
}
void PublicKey::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PublicKey.id)
}
#if LANG_CXX11
void PublicKey::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PublicKey.id)
}
#endif
void PublicKey::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PublicKey.id)
}
void PublicKey::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PublicKey.id)
}
::std::string* PublicKey::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:PublicKey.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PublicKey::release_id() {
  // @@protoc_insertion_point(field_release:PublicKey.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PublicKey::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:PublicKey.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymmetriclyEncryptedMessage::kMessageTypeFieldNumber;
const int SymmetriclyEncryptedMessage::kEncryptionTypeFieldNumber;
const int SymmetriclyEncryptedMessage::kMsgFieldNumber;
const int SymmetriclyEncryptedMessage::kIvFieldNumber;
const int SymmetriclyEncryptedMessage::kSaltFieldNumber;
const int SymmetriclyEncryptedMessage::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymmetriclyEncryptedMessage::SymmetriclyEncryptedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SymmetriclyEncryptedMessage)
}
SymmetriclyEncryptedMessage::SymmetriclyEncryptedMessage(const SymmetriclyEncryptedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iv().size() > 0) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.salt().size() > 0) {
    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&message_type_, &from.message_type_,
    reinterpret_cast<char*>(&encryption_type_) -
    reinterpret_cast<char*>(&message_type_) + sizeof(encryption_type_));
  // @@protoc_insertion_point(copy_constructor:SymmetriclyEncryptedMessage)
}

void SymmetriclyEncryptedMessage::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_type_, 0, reinterpret_cast<char*>(&encryption_type_) -
    reinterpret_cast<char*>(&message_type_) + sizeof(encryption_type_));
  _cached_size_ = 0;
}

SymmetriclyEncryptedMessage::~SymmetriclyEncryptedMessage() {
  // @@protoc_insertion_point(destructor:SymmetriclyEncryptedMessage)
  SharedDtor();
}

void SymmetriclyEncryptedMessage::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SymmetriclyEncryptedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymmetriclyEncryptedMessage::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[7].descriptor;
}

const SymmetriclyEncryptedMessage& SymmetriclyEncryptedMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

SymmetriclyEncryptedMessage* SymmetriclyEncryptedMessage::New(::google::protobuf::Arena* arena) const {
  SymmetriclyEncryptedMessage* n = new SymmetriclyEncryptedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SymmetriclyEncryptedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SymmetriclyEncryptedMessage)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_type_, 0, reinterpret_cast<char*>(&encryption_type_) -
    reinterpret_cast<char*>(&message_type_) + sizeof(encryption_type_));
}

bool SymmetriclyEncryptedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SymmetriclyEncryptedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MessageType message_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SymmetricKeyType encryption_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encryption_type(static_cast< ::SymmetricKeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes iv = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes salt = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SymmetriclyEncryptedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SymmetriclyEncryptedMessage)
  return false;
#undef DO_
}

void SymmetriclyEncryptedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SymmetriclyEncryptedMessage)
  // .MessageType message_type = 1;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // .SymmetricKeyType encryption_type = 2;
  if (this->encryption_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encryption_type(), output);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg(), output);
  }

  // bytes iv = 4;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->iv(), output);
  }

  // bytes salt = 5;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->salt(), output);
  }

  // bytes id = 6;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:SymmetriclyEncryptedMessage)
}

::google::protobuf::uint8* SymmetriclyEncryptedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SymmetriclyEncryptedMessage)
  // .MessageType message_type = 1;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // .SymmetricKeyType encryption_type = 2;
  if (this->encryption_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encryption_type(), target);
  }

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg(), target);
  }

  // bytes iv = 4;
  if (this->iv().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->iv(), target);
  }

  // bytes salt = 5;
  if (this->salt().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->salt(), target);
  }

  // bytes id = 6;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SymmetriclyEncryptedMessage)
  return target;
}

size_t SymmetriclyEncryptedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SymmetriclyEncryptedMessage)
  size_t total_size = 0;

  // bytes msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // bytes iv = 4;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->iv());
  }

  // bytes salt = 5;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->salt());
  }

  // bytes id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .MessageType message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }

  // .SymmetricKeyType encryption_type = 2;
  if (this->encryption_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encryption_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymmetriclyEncryptedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SymmetriclyEncryptedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SymmetriclyEncryptedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymmetriclyEncryptedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SymmetriclyEncryptedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SymmetriclyEncryptedMessage)
    MergeFrom(*source);
  }
}

void SymmetriclyEncryptedMessage::MergeFrom(const SymmetriclyEncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SymmetriclyEncryptedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
  if (from.encryption_type() != 0) {
    set_encryption_type(from.encryption_type());
  }
}

void SymmetriclyEncryptedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SymmetriclyEncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymmetriclyEncryptedMessage::CopyFrom(const SymmetriclyEncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SymmetriclyEncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymmetriclyEncryptedMessage::IsInitialized() const {
  return true;
}

void SymmetriclyEncryptedMessage::Swap(SymmetriclyEncryptedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymmetriclyEncryptedMessage::InternalSwap(SymmetriclyEncryptedMessage* other) {
  msg_.Swap(&other->msg_);
  iv_.Swap(&other->iv_);
  salt_.Swap(&other->salt_);
  id_.Swap(&other->id_);
  std::swap(message_type_, other->message_type_);
  std::swap(encryption_type_, other->encryption_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymmetriclyEncryptedMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SymmetriclyEncryptedMessage

// .MessageType message_type = 1;
void SymmetriclyEncryptedMessage::clear_message_type() {
  message_type_ = 0;
}
::MessageType SymmetriclyEncryptedMessage::message_type() const {
  // @@protoc_insertion_point(field_get:SymmetriclyEncryptedMessage.message_type)
  return static_cast< ::MessageType >(message_type_);
}
void SymmetriclyEncryptedMessage::set_message_type(::MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:SymmetriclyEncryptedMessage.message_type)
}

// .SymmetricKeyType encryption_type = 2;
void SymmetriclyEncryptedMessage::clear_encryption_type() {
  encryption_type_ = 0;
}
::SymmetricKeyType SymmetriclyEncryptedMessage::encryption_type() const {
  // @@protoc_insertion_point(field_get:SymmetriclyEncryptedMessage.encryption_type)
  return static_cast< ::SymmetricKeyType >(encryption_type_);
}
void SymmetriclyEncryptedMessage::set_encryption_type(::SymmetricKeyType value) {
  
  encryption_type_ = value;
  // @@protoc_insertion_point(field_set:SymmetriclyEncryptedMessage.encryption_type)
}

// bytes msg = 3;
void SymmetriclyEncryptedMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SymmetriclyEncryptedMessage::msg() const {
  // @@protoc_insertion_point(field_get:SymmetriclyEncryptedMessage.msg)
  return msg_.GetNoArena();
}
void SymmetriclyEncryptedMessage::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SymmetriclyEncryptedMessage.msg)
}
#if LANG_CXX11
void SymmetriclyEncryptedMessage::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SymmetriclyEncryptedMessage.msg)
}
#endif
void SymmetriclyEncryptedMessage::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SymmetriclyEncryptedMessage.msg)
}
void SymmetriclyEncryptedMessage::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SymmetriclyEncryptedMessage.msg)
}
::std::string* SymmetriclyEncryptedMessage::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:SymmetriclyEncryptedMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymmetriclyEncryptedMessage::release_msg() {
  // @@protoc_insertion_point(field_release:SymmetriclyEncryptedMessage.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymmetriclyEncryptedMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:SymmetriclyEncryptedMessage.msg)
}

// bytes iv = 4;
void SymmetriclyEncryptedMessage::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SymmetriclyEncryptedMessage::iv() const {
  // @@protoc_insertion_point(field_get:SymmetriclyEncryptedMessage.iv)
  return iv_.GetNoArena();
}
void SymmetriclyEncryptedMessage::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SymmetriclyEncryptedMessage.iv)
}
#if LANG_CXX11
void SymmetriclyEncryptedMessage::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SymmetriclyEncryptedMessage.iv)
}
#endif
void SymmetriclyEncryptedMessage::set_iv(const char* value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SymmetriclyEncryptedMessage.iv)
}
void SymmetriclyEncryptedMessage::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SymmetriclyEncryptedMessage.iv)
}
::std::string* SymmetriclyEncryptedMessage::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:SymmetriclyEncryptedMessage.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymmetriclyEncryptedMessage::release_iv() {
  // @@protoc_insertion_point(field_release:SymmetriclyEncryptedMessage.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymmetriclyEncryptedMessage::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:SymmetriclyEncryptedMessage.iv)
}

// bytes salt = 5;
void SymmetriclyEncryptedMessage::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SymmetriclyEncryptedMessage::salt() const {
  // @@protoc_insertion_point(field_get:SymmetriclyEncryptedMessage.salt)
  return salt_.GetNoArena();
}
void SymmetriclyEncryptedMessage::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SymmetriclyEncryptedMessage.salt)
}
#if LANG_CXX11
void SymmetriclyEncryptedMessage::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SymmetriclyEncryptedMessage.salt)
}
#endif
void SymmetriclyEncryptedMessage::set_salt(const char* value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SymmetriclyEncryptedMessage.salt)
}
void SymmetriclyEncryptedMessage::set_salt(const void* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SymmetriclyEncryptedMessage.salt)
}
::std::string* SymmetriclyEncryptedMessage::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:SymmetriclyEncryptedMessage.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymmetriclyEncryptedMessage::release_salt() {
  // @@protoc_insertion_point(field_release:SymmetriclyEncryptedMessage.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymmetriclyEncryptedMessage::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:SymmetriclyEncryptedMessage.salt)
}

// bytes id = 6;
void SymmetriclyEncryptedMessage::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SymmetriclyEncryptedMessage::id() const {
  // @@protoc_insertion_point(field_get:SymmetriclyEncryptedMessage.id)
  return id_.GetNoArena();
}
void SymmetriclyEncryptedMessage::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SymmetriclyEncryptedMessage.id)
}
#if LANG_CXX11
void SymmetriclyEncryptedMessage::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SymmetriclyEncryptedMessage.id)
}
#endif
void SymmetriclyEncryptedMessage::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SymmetriclyEncryptedMessage.id)
}
void SymmetriclyEncryptedMessage::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SymmetriclyEncryptedMessage.id)
}
::std::string* SymmetriclyEncryptedMessage::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:SymmetriclyEncryptedMessage.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SymmetriclyEncryptedMessage::release_id() {
  // @@protoc_insertion_point(field_release:SymmetriclyEncryptedMessage.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SymmetriclyEncryptedMessage::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SymmetriclyEncryptedMessage.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AsymmetriclyEncryptedMessage::kMessageTypeFieldNumber;
const int AsymmetriclyEncryptedMessage::kDestKeyFieldNumber;
const int AsymmetriclyEncryptedMessage::kMsgFieldNumber;
const int AsymmetriclyEncryptedMessage::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AsymmetriclyEncryptedMessage::AsymmetriclyEncryptedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AsymmetriclyEncryptedMessage)
}
AsymmetriclyEncryptedMessage::AsymmetriclyEncryptedMessage(const AsymmetriclyEncryptedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_dest_key()) {
    dest_key_ = new ::KeyId(*from.dest_key_);
  } else {
    dest_key_ = NULL;
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:AsymmetriclyEncryptedMessage)
}

void AsymmetriclyEncryptedMessage::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dest_key_, 0, reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&dest_key_) + sizeof(message_type_));
  _cached_size_ = 0;
}

AsymmetriclyEncryptedMessage::~AsymmetriclyEncryptedMessage() {
  // @@protoc_insertion_point(destructor:AsymmetriclyEncryptedMessage)
  SharedDtor();
}

void AsymmetriclyEncryptedMessage::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete dest_key_;
  }
}

void AsymmetriclyEncryptedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AsymmetriclyEncryptedMessage::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[8].descriptor;
}

const AsymmetriclyEncryptedMessage& AsymmetriclyEncryptedMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

AsymmetriclyEncryptedMessage* AsymmetriclyEncryptedMessage::New(::google::protobuf::Arena* arena) const {
  AsymmetriclyEncryptedMessage* n = new AsymmetriclyEncryptedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AsymmetriclyEncryptedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AsymmetriclyEncryptedMessage)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && dest_key_ != NULL) {
    delete dest_key_;
  }
  dest_key_ = NULL;
  message_type_ = 0;
}

bool AsymmetriclyEncryptedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AsymmetriclyEncryptedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MessageType message_type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_message_type(static_cast< ::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .KeyId dest_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes msg = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AsymmetriclyEncryptedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AsymmetriclyEncryptedMessage)
  return false;
#undef DO_
}

void AsymmetriclyEncryptedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AsymmetriclyEncryptedMessage)
  // .MessageType message_type = 1;
  if (this->message_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }

  // .KeyId dest_key = 2;
  if (this->has_dest_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dest_key_, output);
  }

  // bytes msg = 4;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->msg(), output);
  }

  // bytes id = 5;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:AsymmetriclyEncryptedMessage)
}

::google::protobuf::uint8* AsymmetriclyEncryptedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AsymmetriclyEncryptedMessage)
  // .MessageType message_type = 1;
  if (this->message_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }

  // .KeyId dest_key = 2;
  if (this->has_dest_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dest_key_, false, target);
  }

  // bytes msg = 4;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->msg(), target);
  }

  // bytes id = 5;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AsymmetriclyEncryptedMessage)
  return target;
}

size_t AsymmetriclyEncryptedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AsymmetriclyEncryptedMessage)
  size_t total_size = 0;

  // bytes msg = 4;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  // bytes id = 5;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .KeyId dest_key = 2;
  if (this->has_dest_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dest_key_);
  }

  // .MessageType message_type = 1;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AsymmetriclyEncryptedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AsymmetriclyEncryptedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AsymmetriclyEncryptedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AsymmetriclyEncryptedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AsymmetriclyEncryptedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AsymmetriclyEncryptedMessage)
    MergeFrom(*source);
  }
}

void AsymmetriclyEncryptedMessage::MergeFrom(const AsymmetriclyEncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AsymmetriclyEncryptedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_dest_key()) {
    mutable_dest_key()->::KeyId::MergeFrom(from.dest_key());
  }
  if (from.message_type() != 0) {
    set_message_type(from.message_type());
  }
}

void AsymmetriclyEncryptedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AsymmetriclyEncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsymmetriclyEncryptedMessage::CopyFrom(const AsymmetriclyEncryptedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AsymmetriclyEncryptedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsymmetriclyEncryptedMessage::IsInitialized() const {
  return true;
}

void AsymmetriclyEncryptedMessage::Swap(AsymmetriclyEncryptedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AsymmetriclyEncryptedMessage::InternalSwap(AsymmetriclyEncryptedMessage* other) {
  msg_.Swap(&other->msg_);
  id_.Swap(&other->id_);
  std::swap(dest_key_, other->dest_key_);
  std::swap(message_type_, other->message_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AsymmetriclyEncryptedMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AsymmetriclyEncryptedMessage

// .MessageType message_type = 1;
void AsymmetriclyEncryptedMessage::clear_message_type() {
  message_type_ = 0;
}
::MessageType AsymmetriclyEncryptedMessage::message_type() const {
  // @@protoc_insertion_point(field_get:AsymmetriclyEncryptedMessage.message_type)
  return static_cast< ::MessageType >(message_type_);
}
void AsymmetriclyEncryptedMessage::set_message_type(::MessageType value) {
  
  message_type_ = value;
  // @@protoc_insertion_point(field_set:AsymmetriclyEncryptedMessage.message_type)
}

// .KeyId dest_key = 2;
bool AsymmetriclyEncryptedMessage::has_dest_key() const {
  return this != internal_default_instance() && dest_key_ != NULL;
}
void AsymmetriclyEncryptedMessage::clear_dest_key() {
  if (GetArenaNoVirtual() == NULL && dest_key_ != NULL) delete dest_key_;
  dest_key_ = NULL;
}
const ::KeyId& AsymmetriclyEncryptedMessage::dest_key() const {
  // @@protoc_insertion_point(field_get:AsymmetriclyEncryptedMessage.dest_key)
  return dest_key_ != NULL ? *dest_key_
                         : *::KeyId::internal_default_instance();
}
::KeyId* AsymmetriclyEncryptedMessage::mutable_dest_key() {
  
  if (dest_key_ == NULL) {
    dest_key_ = new ::KeyId;
  }
  // @@protoc_insertion_point(field_mutable:AsymmetriclyEncryptedMessage.dest_key)
  return dest_key_;
}
::KeyId* AsymmetriclyEncryptedMessage::release_dest_key() {
  // @@protoc_insertion_point(field_release:AsymmetriclyEncryptedMessage.dest_key)
  
  ::KeyId* temp = dest_key_;
  dest_key_ = NULL;
  return temp;
}
void AsymmetriclyEncryptedMessage::set_allocated_dest_key(::KeyId* dest_key) {
  delete dest_key_;
  dest_key_ = dest_key;
  if (dest_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:AsymmetriclyEncryptedMessage.dest_key)
}

// bytes msg = 4;
void AsymmetriclyEncryptedMessage::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AsymmetriclyEncryptedMessage::msg() const {
  // @@protoc_insertion_point(field_get:AsymmetriclyEncryptedMessage.msg)
  return msg_.GetNoArena();
}
void AsymmetriclyEncryptedMessage::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AsymmetriclyEncryptedMessage.msg)
}
#if LANG_CXX11
void AsymmetriclyEncryptedMessage::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AsymmetriclyEncryptedMessage.msg)
}
#endif
void AsymmetriclyEncryptedMessage::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AsymmetriclyEncryptedMessage.msg)
}
void AsymmetriclyEncryptedMessage::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AsymmetriclyEncryptedMessage.msg)
}
::std::string* AsymmetriclyEncryptedMessage::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:AsymmetriclyEncryptedMessage.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AsymmetriclyEncryptedMessage::release_msg() {
  // @@protoc_insertion_point(field_release:AsymmetriclyEncryptedMessage.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AsymmetriclyEncryptedMessage::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:AsymmetriclyEncryptedMessage.msg)
}

// bytes id = 5;
void AsymmetriclyEncryptedMessage::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& AsymmetriclyEncryptedMessage::id() const {
  // @@protoc_insertion_point(field_get:AsymmetriclyEncryptedMessage.id)
  return id_.GetNoArena();
}
void AsymmetriclyEncryptedMessage::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AsymmetriclyEncryptedMessage.id)
}
#if LANG_CXX11
void AsymmetriclyEncryptedMessage::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AsymmetriclyEncryptedMessage.id)
}
#endif
void AsymmetriclyEncryptedMessage::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AsymmetriclyEncryptedMessage.id)
}
void AsymmetriclyEncryptedMessage::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AsymmetriclyEncryptedMessage.id)
}
::std::string* AsymmetriclyEncryptedMessage::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:AsymmetriclyEncryptedMessage.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AsymmetriclyEncryptedMessage::release_id() {
  // @@protoc_insertion_point(field_release:AsymmetriclyEncryptedMessage.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AsymmetriclyEncryptedMessage::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AsymmetriclyEncryptedMessage.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageReference::kTypeFieldNumber;
const int MessageReference::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageReference::MessageReference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageReference)
}
MessageReference::MessageReference(const MessageReference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MessageReference)
}

void MessageReference::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

MessageReference::~MessageReference() {
  // @@protoc_insertion_point(destructor:MessageReference)
  SharedDtor();
}

void MessageReference::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageReference::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[9].descriptor;
}

const MessageReference& MessageReference::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

MessageReference* MessageReference::New(::google::protobuf::Arena* arena) const {
  MessageReference* n = new MessageReference;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageReference::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageReference)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool MessageReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .MessageType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageReference)
  return false;
#undef DO_
}

void MessageReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageReference)
  // .MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:MessageReference)
}

::google::protobuf::uint8* MessageReference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MessageReference)
  // .MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bytes id = 2;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MessageReference)
  return target;
}

size_t MessageReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageReference)
  size_t total_size = 0;

  // bytes id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageReference)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageReference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageReference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageReference)
    MergeFrom(*source);
  }
}

void MessageReference::MergeFrom(const MessageReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MessageReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageReference::CopyFrom(const MessageReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageReference::IsInitialized() const {
  return true;
}

void MessageReference::Swap(MessageReference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageReference::InternalSwap(MessageReference* other) {
  id_.Swap(&other->id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageReference::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageReference

// .MessageType type = 1;
void MessageReference::clear_type() {
  type_ = 0;
}
::MessageType MessageReference::type() const {
  // @@protoc_insertion_point(field_get:MessageReference.type)
  return static_cast< ::MessageType >(type_);
}
void MessageReference::set_type(::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:MessageReference.type)
}

// bytes id = 2;
void MessageReference::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MessageReference::id() const {
  // @@protoc_insertion_point(field_get:MessageReference.id)
  return id_.GetNoArena();
}
void MessageReference::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageReference.id)
}
#if LANG_CXX11
void MessageReference::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MessageReference.id)
}
#endif
void MessageReference::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageReference.id)
}
void MessageReference::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageReference.id)
}
::std::string* MessageReference::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:MessageReference.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MessageReference::release_id() {
  // @@protoc_insertion_point(field_release:MessageReference.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MessageReference::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:MessageReference.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignedMessage::kPostFieldNumber;
const int SignedMessage::kSignedMessageFieldNumber;
const int SignedMessage::kPrivateKeyFieldNumber;
const int SignedMessage::kPublicKeyFieldNumber;
const int SignedMessage::kSymmetriclyEncryptedMessageFieldNumber;
const int SignedMessage::kAsymmetriclyEncryptedMessageFieldNumber;
const int SignedMessage::kReferenceFieldNumber;
const int SignedMessage::kMessageSignatureFieldNumber;
const int SignedMessage::kTimestampFieldNumber;
const int SignedMessage::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignedMessage::SignedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_message_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignedMessage)
}
SignedMessage::SignedMessage(const SignedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_message_signature()) {
    message_signature_ = new ::Signature(*from.message_signature_);
  } else {
    message_signature_ = NULL;
  }
  timestamp_ = from.timestamp_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kPost: {
      mutable_post()->::Post::MergeFrom(from.post());
      break;
    }
    case kSignedMessage: {
      mutable_signedmessage()->::Signature::MergeFrom(from.signedmessage());
      break;
    }
    case kPrivateKey: {
      mutable_privatekey()->::PrivateKey::MergeFrom(from.privatekey());
      break;
    }
    case kPublicKey: {
      mutable_publickey()->::PublicKey::MergeFrom(from.publickey());
      break;
    }
    case kSymmetriclyEncryptedMessage: {
      mutable_symmetriclyencryptedmessage()->::SymmetriclyEncryptedMessage::MergeFrom(from.symmetriclyencryptedmessage());
      break;
    }
    case kAsymmetriclyEncryptedMessage: {
      mutable_asymmetriclyencryptedmessage()->::AsymmetriclyEncryptedMessage::MergeFrom(from.asymmetriclyencryptedmessage());
      break;
    }
    case kReference: {
      mutable_reference()->::MessageReference::MergeFrom(from.reference());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SignedMessage)
}

void SignedMessage::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_signature_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&message_signature_) + sizeof(timestamp_));
  clear_has_msg();
  _cached_size_ = 0;
}

SignedMessage::~SignedMessage() {
  // @@protoc_insertion_point(destructor:SignedMessage)
  SharedDtor();
}

void SignedMessage::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete message_signature_;
  }
  if (has_msg()) {
    clear_msg();
  }
}

void SignedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedMessage::descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[10].descriptor;
}

const SignedMessage& SignedMessage::default_instance() {
  protobuf_message_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignedMessage* SignedMessage::New(::google::protobuf::Arena* arena) const {
  SignedMessage* n = new SignedMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignedMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:SignedMessage)
  switch (msg_case()) {
    case kPost: {
      delete msg_.post_;
      break;
    }
    case kSignedMessage: {
      delete msg_.signedmessage_;
      break;
    }
    case kPrivateKey: {
      delete msg_.privatekey_;
      break;
    }
    case kPublicKey: {
      delete msg_.publickey_;
      break;
    }
    case kSymmetriclyEncryptedMessage: {
      delete msg_.symmetriclyencryptedmessage_;
      break;
    }
    case kAsymmetriclyEncryptedMessage: {
      delete msg_.asymmetriclyencryptedmessage_;
      break;
    }
    case kReference: {
      delete msg_.reference_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void SignedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SignedMessage)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && message_signature_ != NULL) {
    delete message_signature_;
  }
  message_signature_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_msg();
}

bool SignedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Post post = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_post()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Signature signedMessage = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PrivateKey privateKey = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_privatekey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .PublicKey publicKey = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_publickey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .SymmetriclyEncryptedMessage symmetriclyEncryptedMessage = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symmetriclyencryptedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .AsymmetriclyEncryptedMessage asymmetriclyEncryptedMessage = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_asymmetriclyencryptedmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Signature message_signature = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 timestamp = 9;
      case 9: {
        if (tag == 73u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .MessageReference reference = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes id = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignedMessage)
  return false;
#undef DO_
}

void SignedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignedMessage)
  // .Post post = 1;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_.post_, output);
  }

  // .Signature signedMessage = 2;
  if (has_signedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_.signedmessage_, output);
  }

  // .PrivateKey privateKey = 3;
  if (has_privatekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *msg_.privatekey_, output);
  }

  // .PublicKey publicKey = 4;
  if (has_publickey()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *msg_.publickey_, output);
  }

  // .SymmetriclyEncryptedMessage symmetriclyEncryptedMessage = 5;
  if (has_symmetriclyencryptedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *msg_.symmetriclyencryptedmessage_, output);
  }

  // .AsymmetriclyEncryptedMessage asymmetriclyEncryptedMessage = 6;
  if (has_asymmetriclyencryptedmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *msg_.asymmetriclyencryptedmessage_, output);
  }

  // .Signature message_signature = 8;
  if (this->has_message_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->message_signature_, output);
  }

  // fixed64 timestamp = 9;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->timestamp(), output);
  }

  // .MessageReference reference = 10;
  if (has_reference()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *msg_.reference_, output);
  }

  // bytes id = 11;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:SignedMessage)
}

::google::protobuf::uint8* SignedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SignedMessage)
  // .Post post = 1;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_.post_, false, target);
  }

  // .Signature signedMessage = 2;
  if (has_signedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_.signedmessage_, false, target);
  }

  // .PrivateKey privateKey = 3;
  if (has_privatekey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *msg_.privatekey_, false, target);
  }

  // .PublicKey publicKey = 4;
  if (has_publickey()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *msg_.publickey_, false, target);
  }

  // .SymmetriclyEncryptedMessage symmetriclyEncryptedMessage = 5;
  if (has_symmetriclyencryptedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *msg_.symmetriclyencryptedmessage_, false, target);
  }

  // .AsymmetriclyEncryptedMessage asymmetriclyEncryptedMessage = 6;
  if (has_asymmetriclyencryptedmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *msg_.asymmetriclyencryptedmessage_, false, target);
  }

  // .Signature message_signature = 8;
  if (this->has_message_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->message_signature_, false, target);
  }

  // fixed64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->timestamp(), target);
  }

  // .MessageReference reference = 10;
  if (has_reference()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *msg_.reference_, false, target);
  }

  // bytes id = 11;
  if (this->id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SignedMessage)
  return target;
}

size_t SignedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignedMessage)
  size_t total_size = 0;

  // bytes id = 11;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // .Signature message_signature = 8;
  if (this->has_message_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_signature_);
  }

  // fixed64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 + 8;
  }

  switch (msg_case()) {
    // .Post post = 1;
    case kPost: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.post_);
      break;
    }
    // .Signature signedMessage = 2;
    case kSignedMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.signedmessage_);
      break;
    }
    // .PrivateKey privateKey = 3;
    case kPrivateKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.privatekey_);
      break;
    }
    // .PublicKey publicKey = 4;
    case kPublicKey: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.publickey_);
      break;
    }
    // .SymmetriclyEncryptedMessage symmetriclyEncryptedMessage = 5;
    case kSymmetriclyEncryptedMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.symmetriclyencryptedmessage_);
      break;
    }
    // .AsymmetriclyEncryptedMessage asymmetriclyEncryptedMessage = 6;
    case kAsymmetriclyEncryptedMessage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.asymmetriclyencryptedmessage_);
      break;
    }
    // .MessageReference reference = 10;
    case kReference: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_.reference_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SignedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignedMessage)
    MergeFrom(*source);
  }
}

void SignedMessage::MergeFrom(const SignedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_message_signature()) {
    mutable_message_signature()->::Signature::MergeFrom(from.message_signature());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  switch (from.msg_case()) {
    case kPost: {
      mutable_post()->::Post::MergeFrom(from.post());
      break;
    }
    case kSignedMessage: {
      mutable_signedmessage()->::Signature::MergeFrom(from.signedmessage());
      break;
    }
    case kPrivateKey: {
      mutable_privatekey()->::PrivateKey::MergeFrom(from.privatekey());
      break;
    }
    case kPublicKey: {
      mutable_publickey()->::PublicKey::MergeFrom(from.publickey());
      break;
    }
    case kSymmetriclyEncryptedMessage: {
      mutable_symmetriclyencryptedmessage()->::SymmetriclyEncryptedMessage::MergeFrom(from.symmetriclyencryptedmessage());
      break;
    }
    case kAsymmetriclyEncryptedMessage: {
      mutable_asymmetriclyencryptedmessage()->::AsymmetriclyEncryptedMessage::MergeFrom(from.asymmetriclyencryptedmessage());
      break;
    }
    case kReference: {
      mutable_reference()->::MessageReference::MergeFrom(from.reference());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void SignedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedMessage::CopyFrom(const SignedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedMessage::IsInitialized() const {
  return true;
}

void SignedMessage::Swap(SignedMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignedMessage::InternalSwap(SignedMessage* other) {
  id_.Swap(&other->id_);
  std::swap(message_signature_, other->message_signature_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(msg_, other->msg_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignedMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignedMessage

// .Post post = 1;
bool SignedMessage::has_post() const {
  return msg_case() == kPost;
}
void SignedMessage::set_has_post() {
  _oneof_case_[0] = kPost;
}
void SignedMessage::clear_post() {
  if (has_post()) {
    delete msg_.post_;
    clear_has_msg();
  }
}
 const ::Post& SignedMessage::post() const {
  // @@protoc_insertion_point(field_get:SignedMessage.post)
  return has_post()
      ? *msg_.post_
      : ::Post::default_instance();
}
::Post* SignedMessage::mutable_post() {
  if (!has_post()) {
    clear_msg();
    set_has_post();
    msg_.post_ = new ::Post;
  }
  // @@protoc_insertion_point(field_mutable:SignedMessage.post)
  return msg_.post_;
}
::Post* SignedMessage::release_post() {
  // @@protoc_insertion_point(field_release:SignedMessage.post)
  if (has_post()) {
    clear_has_msg();
    ::Post* temp = msg_.post_;
    msg_.post_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SignedMessage::set_allocated_post(::Post* post) {
  clear_msg();
  if (post) {
    set_has_post();
    msg_.post_ = post;
  }
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.post)
}

// .Signature signedMessage = 2;
bool SignedMessage::has_signedmessage() const {
  return msg_case() == kSignedMessage;
}
void SignedMessage::set_has_signedmessage() {
  _oneof_case_[0] = kSignedMessage;
}
void SignedMessage::clear_signedmessage() {
  if (has_signedmessage()) {
    delete msg_.signedmessage_;
    clear_has_msg();
  }
}
 const ::Signature& SignedMessage::signedmessage() const {
  // @@protoc_insertion_point(field_get:SignedMessage.signedMessage)
  return has_signedmessage()
      ? *msg_.signedmessage_
      : ::Signature::default_instance();
}
::Signature* SignedMessage::mutable_signedmessage() {
  if (!has_signedmessage()) {
    clear_msg();
    set_has_signedmessage();
    msg_.signedmessage_ = new ::Signature;
  }
  // @@protoc_insertion_point(field_mutable:SignedMessage.signedMessage)
  return msg_.signedmessage_;
}
::Signature* SignedMessage::release_signedmessage() {
  // @@protoc_insertion_point(field_release:SignedMessage.signedMessage)
  if (has_signedmessage()) {
    clear_has_msg();
    ::Signature* temp = msg_.signedmessage_;
    msg_.signedmessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SignedMessage::set_allocated_signedmessage(::Signature* signedmessage) {
  clear_msg();
  if (signedmessage) {
    set_has_signedmessage();
    msg_.signedmessage_ = signedmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.signedMessage)
}

// .PrivateKey privateKey = 3;
bool SignedMessage::has_privatekey() const {
  return msg_case() == kPrivateKey;
}
void SignedMessage::set_has_privatekey() {
  _oneof_case_[0] = kPrivateKey;
}
void SignedMessage::clear_privatekey() {
  if (has_privatekey()) {
    delete msg_.privatekey_;
    clear_has_msg();
  }
}
 const ::PrivateKey& SignedMessage::privatekey() const {
  // @@protoc_insertion_point(field_get:SignedMessage.privateKey)
  return has_privatekey()
      ? *msg_.privatekey_
      : ::PrivateKey::default_instance();
}
::PrivateKey* SignedMessage::mutable_privatekey() {
  if (!has_privatekey()) {
    clear_msg();
    set_has_privatekey();
    msg_.privatekey_ = new ::PrivateKey;
  }
  // @@protoc_insertion_point(field_mutable:SignedMessage.privateKey)
  return msg_.privatekey_;
}
::PrivateKey* SignedMessage::release_privatekey() {
  // @@protoc_insertion_point(field_release:SignedMessage.privateKey)
  if (has_privatekey()) {
    clear_has_msg();
    ::PrivateKey* temp = msg_.privatekey_;
    msg_.privatekey_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SignedMessage::set_allocated_privatekey(::PrivateKey* privatekey) {
  clear_msg();
  if (privatekey) {
    set_has_privatekey();
    msg_.privatekey_ = privatekey;
  }
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.privateKey)
}

// .PublicKey publicKey = 4;
bool SignedMessage::has_publickey() const {
  return msg_case() == kPublicKey;
}
void SignedMessage::set_has_publickey() {
  _oneof_case_[0] = kPublicKey;
}
void SignedMessage::clear_publickey() {
  if (has_publickey()) {
    delete msg_.publickey_;
    clear_has_msg();
  }
}
 const ::PublicKey& SignedMessage::publickey() const {
  // @@protoc_insertion_point(field_get:SignedMessage.publicKey)
  return has_publickey()
      ? *msg_.publickey_
      : ::PublicKey::default_instance();
}
::PublicKey* SignedMessage::mutable_publickey() {
  if (!has_publickey()) {
    clear_msg();
    set_has_publickey();
    msg_.publickey_ = new ::PublicKey;
  }
  // @@protoc_insertion_point(field_mutable:SignedMessage.publicKey)
  return msg_.publickey_;
}
::PublicKey* SignedMessage::release_publickey() {
  // @@protoc_insertion_point(field_release:SignedMessage.publicKey)
  if (has_publickey()) {
    clear_has_msg();
    ::PublicKey* temp = msg_.publickey_;
    msg_.publickey_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SignedMessage::set_allocated_publickey(::PublicKey* publickey) {
  clear_msg();
  if (publickey) {
    set_has_publickey();
    msg_.publickey_ = publickey;
  }
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.publicKey)
}

// .SymmetriclyEncryptedMessage symmetriclyEncryptedMessage = 5;
bool SignedMessage::has_symmetriclyencryptedmessage() const {
  return msg_case() == kSymmetriclyEncryptedMessage;
}
void SignedMessage::set_has_symmetriclyencryptedmessage() {
  _oneof_case_[0] = kSymmetriclyEncryptedMessage;
}
void SignedMessage::clear_symmetriclyencryptedmessage() {
  if (has_symmetriclyencryptedmessage()) {
    delete msg_.symmetriclyencryptedmessage_;
    clear_has_msg();
  }
}
 const ::SymmetriclyEncryptedMessage& SignedMessage::symmetriclyencryptedmessage() const {
  // @@protoc_insertion_point(field_get:SignedMessage.symmetriclyEncryptedMessage)
  return has_symmetriclyencryptedmessage()
      ? *msg_.symmetriclyencryptedmessage_
      : ::SymmetriclyEncryptedMessage::default_instance();
}
::SymmetriclyEncryptedMessage* SignedMessage::mutable_symmetriclyencryptedmessage() {
  if (!has_symmetriclyencryptedmessage()) {
    clear_msg();
    set_has_symmetriclyencryptedmessage();
    msg_.symmetriclyencryptedmessage_ = new ::SymmetriclyEncryptedMessage;
  }
  // @@protoc_insertion_point(field_mutable:SignedMessage.symmetriclyEncryptedMessage)
  return msg_.symmetriclyencryptedmessage_;
}
::SymmetriclyEncryptedMessage* SignedMessage::release_symmetriclyencryptedmessage() {
  // @@protoc_insertion_point(field_release:SignedMessage.symmetriclyEncryptedMessage)
  if (has_symmetriclyencryptedmessage()) {
    clear_has_msg();
    ::SymmetriclyEncryptedMessage* temp = msg_.symmetriclyencryptedmessage_;
    msg_.symmetriclyencryptedmessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SignedMessage::set_allocated_symmetriclyencryptedmessage(::SymmetriclyEncryptedMessage* symmetriclyencryptedmessage) {
  clear_msg();
  if (symmetriclyencryptedmessage) {
    set_has_symmetriclyencryptedmessage();
    msg_.symmetriclyencryptedmessage_ = symmetriclyencryptedmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.symmetriclyEncryptedMessage)
}

// .AsymmetriclyEncryptedMessage asymmetriclyEncryptedMessage = 6;
bool SignedMessage::has_asymmetriclyencryptedmessage() const {
  return msg_case() == kAsymmetriclyEncryptedMessage;
}
void SignedMessage::set_has_asymmetriclyencryptedmessage() {
  _oneof_case_[0] = kAsymmetriclyEncryptedMessage;
}
void SignedMessage::clear_asymmetriclyencryptedmessage() {
  if (has_asymmetriclyencryptedmessage()) {
    delete msg_.asymmetriclyencryptedmessage_;
    clear_has_msg();
  }
}
 const ::AsymmetriclyEncryptedMessage& SignedMessage::asymmetriclyencryptedmessage() const {
  // @@protoc_insertion_point(field_get:SignedMessage.asymmetriclyEncryptedMessage)
  return has_asymmetriclyencryptedmessage()
      ? *msg_.asymmetriclyencryptedmessage_
      : ::AsymmetriclyEncryptedMessage::default_instance();
}
::AsymmetriclyEncryptedMessage* SignedMessage::mutable_asymmetriclyencryptedmessage() {
  if (!has_asymmetriclyencryptedmessage()) {
    clear_msg();
    set_has_asymmetriclyencryptedmessage();
    msg_.asymmetriclyencryptedmessage_ = new ::AsymmetriclyEncryptedMessage;
  }
  // @@protoc_insertion_point(field_mutable:SignedMessage.asymmetriclyEncryptedMessage)
  return msg_.asymmetriclyencryptedmessage_;
}
::AsymmetriclyEncryptedMessage* SignedMessage::release_asymmetriclyencryptedmessage() {
  // @@protoc_insertion_point(field_release:SignedMessage.asymmetriclyEncryptedMessage)
  if (has_asymmetriclyencryptedmessage()) {
    clear_has_msg();
    ::AsymmetriclyEncryptedMessage* temp = msg_.asymmetriclyencryptedmessage_;
    msg_.asymmetriclyencryptedmessage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SignedMessage::set_allocated_asymmetriclyencryptedmessage(::AsymmetriclyEncryptedMessage* asymmetriclyencryptedmessage) {
  clear_msg();
  if (asymmetriclyencryptedmessage) {
    set_has_asymmetriclyencryptedmessage();
    msg_.asymmetriclyencryptedmessage_ = asymmetriclyencryptedmessage;
  }
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.asymmetriclyEncryptedMessage)
}

// .MessageReference reference = 10;
bool SignedMessage::has_reference() const {
  return msg_case() == kReference;
}
void SignedMessage::set_has_reference() {
  _oneof_case_[0] = kReference;
}
void SignedMessage::clear_reference() {
  if (has_reference()) {
    delete msg_.reference_;
    clear_has_msg();
  }
}
 const ::MessageReference& SignedMessage::reference() const {
  // @@protoc_insertion_point(field_get:SignedMessage.reference)
  return has_reference()
      ? *msg_.reference_
      : ::MessageReference::default_instance();
}
::MessageReference* SignedMessage::mutable_reference() {
  if (!has_reference()) {
    clear_msg();
    set_has_reference();
    msg_.reference_ = new ::MessageReference;
  }
  // @@protoc_insertion_point(field_mutable:SignedMessage.reference)
  return msg_.reference_;
}
::MessageReference* SignedMessage::release_reference() {
  // @@protoc_insertion_point(field_release:SignedMessage.reference)
  if (has_reference()) {
    clear_has_msg();
    ::MessageReference* temp = msg_.reference_;
    msg_.reference_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SignedMessage::set_allocated_reference(::MessageReference* reference) {
  clear_msg();
  if (reference) {
    set_has_reference();
    msg_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.reference)
}

// .Signature message_signature = 8;
bool SignedMessage::has_message_signature() const {
  return this != internal_default_instance() && message_signature_ != NULL;
}
void SignedMessage::clear_message_signature() {
  if (GetArenaNoVirtual() == NULL && message_signature_ != NULL) delete message_signature_;
  message_signature_ = NULL;
}
const ::Signature& SignedMessage::message_signature() const {
  // @@protoc_insertion_point(field_get:SignedMessage.message_signature)
  return message_signature_ != NULL ? *message_signature_
                         : *::Signature::internal_default_instance();
}
::Signature* SignedMessage::mutable_message_signature() {
  
  if (message_signature_ == NULL) {
    message_signature_ = new ::Signature;
  }
  // @@protoc_insertion_point(field_mutable:SignedMessage.message_signature)
  return message_signature_;
}
::Signature* SignedMessage::release_message_signature() {
  // @@protoc_insertion_point(field_release:SignedMessage.message_signature)
  
  ::Signature* temp = message_signature_;
  message_signature_ = NULL;
  return temp;
}
void SignedMessage::set_allocated_message_signature(::Signature* message_signature) {
  delete message_signature_;
  message_signature_ = message_signature;
  if (message_signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.message_signature)
}

// fixed64 timestamp = 9;
void SignedMessage::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SignedMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:SignedMessage.timestamp)
  return timestamp_;
}
void SignedMessage::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:SignedMessage.timestamp)
}

// bytes id = 11;
void SignedMessage::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SignedMessage::id() const {
  // @@protoc_insertion_point(field_get:SignedMessage.id)
  return id_.GetNoArena();
}
void SignedMessage::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignedMessage.id)
}
#if LANG_CXX11
void SignedMessage::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignedMessage.id)
}
#endif
void SignedMessage::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignedMessage.id)
}
void SignedMessage::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignedMessage.id)
}
::std::string* SignedMessage::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:SignedMessage.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignedMessage::release_id() {
  // @@protoc_insertion_point(field_release:SignedMessage.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignedMessage::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:SignedMessage.id)
}

bool SignedMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
void SignedMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
SignedMessage::MsgCase SignedMessage::msg_case() const {
  return SignedMessage::MsgCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
